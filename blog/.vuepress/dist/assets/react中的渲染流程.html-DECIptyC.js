import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as c,f as a}from"./app-C4tUi4gM.js";const i={},d=a('<h1 id="react中的渲染流程" tabindex="-1"><a class="header-anchor" href="#react中的渲染流程"><span><code>react</code>中的渲染流程</span></a></h1><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h2><ul><li>宏观的设计理念。</li><li>关键原理清晰描述，抽象和具象相结合。</li><li>结合工程实践和工作成果。</li></ul><h2 id="设计理念" tabindex="-1"><a class="header-anchor" href="#设计理念"><span>设计理念</span></a></h2><ul><li>跨平台渲染 --&gt; 虚拟<code>DOM</code>。</li><li>快速响应 --&gt; 异步可中断 + 增量更新。</li></ul><h2 id="性能瓶颈" tabindex="-1"><a class="header-anchor" href="#性能瓶颈"><span>性能瓶颈</span></a></h2><ul><li><code>js</code>任务执行时间过长。 <ul><li>浏览器刷新频率为<code>60Hz</code>，大概<code>16.6</code>毫秒渲染一次，而<code>js</code>线程和渲染线程是互斥的，所以如果<code>js</code>线程执行任务时间超过<code>16.6ms</code>的话，就会导致掉帧，导致卡顿，解决方案就是<code>react</code>利用空闲的时间进行更新，不影响渲染进行的线程。</li><li>把一个耗时任务切分成一个个小任务，分布在每一帧里的方式就叫时间切片。</li></ul></li></ul><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h2><ul><li><code>concurrent-mode</code>。</li><li><code>concurrent-mode-adoption</code>。</li></ul><h2 id="react16-的渲染流程" tabindex="-1"><a class="header-anchor" href="#react16-的渲染流程"><span><code>react16+</code>的渲染流程</span></a></h2><ul><li><code>scheduler</code>：调度。选择高优先级的任务进入<code>reconciler</code>。</li><li><code>reconciler</code>：调和（是可中断的）。计算变更的内容。</li><li><code>react-dom</code>：提交。把变更的内容渲染到页面上。</li></ul><h2 id="屏幕刷新率" tabindex="-1"><a class="header-anchor" href="#屏幕刷新率"><span>屏幕刷新率</span></a></h2><ul><li>目前大多数设备的屏幕刷新频率为<code>60</code>次每秒。</li><li>浏览器渲染动画或页面的每一帧的速率也需要跟设备屏幕的刷新率保持一致。</li><li>页面是一帧一帧绘制出来的，当每秒绘制的帧数（FPS）达到 60 时，页面是流畅的，小于这个值时，用户会感觉到卡顿</li><li>每个帧的预算时间是 16.66 毫秒（1 秒 /60）。</li><li><code>1s60帧</code>，所以每一帧的时间是<code>1000/60≈16ms</code>，所以我们书写代码时力求不让一帧的工作量超过<code>16ms</code>。</li></ul><h2 id="帧" tabindex="-1"><a class="header-anchor" href="#帧"><span>帧</span></a></h2><ul><li>每个帧的开头包括样式计算、布局和绘制。</li><li><code>JavaScript</code>执行<code>javascript</code>引擎和页面渲染引擎在同一个渲染线程，<code>GUI</code>渲染和<code>javascript</code>执行两者是互斥的。</li><li>如果某个任务执行时间过长，浏览器会推迟渲染。</li></ul><h2 id="requestidlecallback" tabindex="-1"><a class="header-anchor" href="#requestidlecallback"><span>requestIdleCallback</span></a></h2><ul><li>我们希望快速响应用户，让用户觉得够快，不能阻塞用户的交互。</li><li><code>requestIdleCallback</code>使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。</li><li>正常帧任务完成后没超过<code>16ms</code>说明时间有富余，此时就会执行<code>requestIdleCallback</code>里注册的任务。</li></ul><h2 id="同步写法-现在的官方版本-默认还是异步" tabindex="-1"><a class="header-anchor" href="#同步写法-现在的官方版本-默认还是异步"><span>同步写法，现在的官方版本，默认还是异步</span></a></h2><p><code>ReactDOM.render(&lt;App /&gt;,document.getElementById(&#39;root&#39;))</code>。</p><h2 id="异步写法" tabindex="-1"><a class="header-anchor" href="#异步写法"><span>异步写法</span></a></h2><p><code>ReactDOM.unstable_createRoot(document.getElementById(&#39;root&#39;)).render(&lt;App /&gt;)</code>。</p><h2 id="如果申请的任务执行时间特别长-什么时候归还" tabindex="-1"><a class="header-anchor" href="#如果申请的任务执行时间特别长-什么时候归还"><span>如果申请的任务执行时间特别长，什么时候归还</span></a></h2><p>这个是谁申请，谁决定什么时候归还（还钱），如果没归还，浏览器也没办法（合作式调度，君子协定）。</p><p>什么时候归还？</p><ol><li>任务完成了。</li><li>本帧没有剩余时间了。</li></ol><h2 id="异步的写法缺陷或限制" tabindex="-1"><a class="header-anchor" href="#异步的写法缺陷或限制"><span>异步的写法缺陷或限制</span></a></h2><p>异步写法反而把执行时间变长了（原来<code>50ms</code>就做完了，现在干<code>5ms</code>休息一下，时间就拉长了）。</p><h2 id="如何确定一个任务的时长" tabindex="-1"><a class="header-anchor" href="#如何确定一个任务的时长"><span>如何确定一个任务的时长</span></a></h2><p>一帧<code>16.6ms</code>，你的任务肯定不能超过<code>16.6ms</code>，浏览器它自己的工作大概需要<code>10ms</code>，所以留给你只有<code>5ms</code>。</p><p><strong>任务都分片了，每个任务都不是重新开始的，而是增量进行的。</strong></p><h2 id="这种调度怎么兼容以前的生命周期" tabindex="-1"><a class="header-anchor" href="#这种调度怎么兼容以前的生命周期"><span>这种调度怎么兼容以前的生命周期</span></a></h2><p>为了给异步操作让步，<code>componentWillMount</code> <code>componentWillUpdate</code> <code>componentWillReceiveProps</code>这三个生命周期被废弃了。</p><h2 id="fiber" tabindex="-1"><a class="header-anchor" href="#fiber"><span><code>fiber</code></span></a></h2><ul><li>我们可以通过某些调度策略合理分配<code>CPU</code>资源，从而提高用户的响应速度。</li><li>通过<code>fiber</code>架构，让自己的调和过程变成可被中断，适时地让出<code>CPU</code>执行权，可以让浏览器及时的响应用户的交互。</li><li><code>fiber</code>是一个执行单元，每次执行完一个执行单元，<code>react</code>就会检查现在还剩多少时间，如果没有时间就将控制权让出去。</li></ul><h2 id="默认的同步渲染-使用fiber了吗" tabindex="-1"><a class="header-anchor" href="#默认的同步渲染-使用fiber了吗"><span>默认的同步渲染，使用<code>fiber</code>了吗</span></a></h2><p>默认的同步渲染，也使用了<code>fiber</code>，只不过没有暂停。</p>',36),o=[d];function t(n,r){return c(),l("div",null,o)}const p=e(i,[["render",t],["__file","react中的渲染流程.html.vue"]]),u=JSON.parse('{"path":"/REACT/react%E4%B8%AD%E7%9A%84%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.html","title":"react中的渲染流程","lang":"zh-CN","frontmatter":{"description":"react中的渲染流程 思路 宏观的设计理念。 关键原理清晰描述，抽象和具象相结合。 结合工程实践和工作成果。 设计理念 跨平台渲染 --> 虚拟DOM。 快速响应 --> 异步可中断 + 增量更新。 性能瓶颈 js任务执行时间过长。 浏览器刷新频率为60Hz，大概16.6毫秒渲染一次，而js线程和渲染线程是互斥的，所以如果js线程执行任务时间超过16...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/REACT/react%E4%B8%AD%E7%9A%84%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"react中的渲染流程"}],["meta",{"property":"og:description","content":"react中的渲染流程 思路 宏观的设计理念。 关键原理清晰描述，抽象和具象相结合。 结合工程实践和工作成果。 设计理念 跨平台渲染 --> 虚拟DOM。 快速响应 --> 异步可中断 + 增量更新。 性能瓶颈 js任务执行时间过长。 浏览器刷新频率为60Hz，大概16.6毫秒渲染一次，而js线程和渲染线程是互斥的，所以如果js线程执行任务时间超过16..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"🍑"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"react中的渲染流程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"设计理念","slug":"设计理念","link":"#设计理念","children":[]},{"level":2,"title":"性能瓶颈","slug":"性能瓶颈","link":"#性能瓶颈","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"react16+的渲染流程","slug":"react16-的渲染流程","link":"#react16-的渲染流程","children":[]},{"level":2,"title":"屏幕刷新率","slug":"屏幕刷新率","link":"#屏幕刷新率","children":[]},{"level":2,"title":"帧","slug":"帧","link":"#帧","children":[]},{"level":2,"title":"requestIdleCallback","slug":"requestidlecallback","link":"#requestidlecallback","children":[]},{"level":2,"title":"同步写法，现在的官方版本，默认还是异步","slug":"同步写法-现在的官方版本-默认还是异步","link":"#同步写法-现在的官方版本-默认还是异步","children":[]},{"level":2,"title":"异步写法","slug":"异步写法","link":"#异步写法","children":[]},{"level":2,"title":"如果申请的任务执行时间特别长，什么时候归还","slug":"如果申请的任务执行时间特别长-什么时候归还","link":"#如果申请的任务执行时间特别长-什么时候归还","children":[]},{"level":2,"title":"异步的写法缺陷或限制","slug":"异步的写法缺陷或限制","link":"#异步的写法缺陷或限制","children":[]},{"level":2,"title":"如何确定一个任务的时长","slug":"如何确定一个任务的时长","link":"#如何确定一个任务的时长","children":[]},{"level":2,"title":"这种调度怎么兼容以前的生命周期","slug":"这种调度怎么兼容以前的生命周期","link":"#这种调度怎么兼容以前的生命周期","children":[]},{"level":2,"title":"fiber","slug":"fiber","link":"#fiber","children":[]},{"level":2,"title":"默认的同步渲染，使用fiber了吗","slug":"默认的同步渲染-使用fiber了吗","link":"#默认的同步渲染-使用fiber了吗","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.35,"words":1005},"filePathRelative":"REACT/react中的渲染流程.md","excerpt":"\\n<h2>思路</h2>\\n<ul>\\n<li>宏观的设计理念。</li>\\n<li>关键原理清晰描述，抽象和具象相结合。</li>\\n<li>结合工程实践和工作成果。</li>\\n</ul>\\n<h2>设计理念</h2>\\n<ul>\\n<li>跨平台渲染 --&gt; 虚拟<code>DOM</code>。</li>\\n<li>快速响应 --&gt; 异步可中断 + 增量更新。</li>\\n</ul>\\n<h2>性能瓶颈</h2>\\n<ul>\\n<li><code>js</code>任务执行时间过长。\\n<ul>\\n<li>浏览器刷新频率为<code>60Hz</code>，大概<code>16.6</code>毫秒渲染一次，而<code>js</code>线程和渲染线程是互斥的，所以如果<code>js</code>线程执行任务时间超过<code>16.6ms</code>的话，就会导致掉帧，导致卡顿，解决方案就是<code>react</code>利用空闲的时间进行更新，不影响渲染进行的线程。</li>\\n<li>把一个耗时任务切分成一个个小任务，分布在每一帧里的方式就叫时间切片。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{p as comp,u as data};
