import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,f as a}from"./app-C4tUi4gM.js";const l={},n=a(`<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h1><p><code>JavaScript</code>目前包含八种数据类型，其中可以分成基本数据类型和引用数据类型两大类。</p><p>基本数据类型（原始值）：</p><ul><li><code>Number</code>（数值，包含<code>NaN</code>）。</li><li><code>String</code>（字符串）。</li><li><code>Boolean</code>（布尔值）。</li><li><code>Undefined</code>（未定义/未初始化）。</li><li><code>Null</code>（空对象）。</li><li><code>Symbol</code>（独一无二的值，<code>ES6</code>新增）。</li><li><code>BigInt</code>（大整数，能够表示超过<code>Number</code>类型大小限制的整数，<code>ES2020</code>新增）。</li></ul><p>引用数据类型（引用值）：</p><ul><li><code>Object</code>（对象。<code>Array</code>（数组）和<code>function</code>（函数）也属于对象的一种）。</li></ul><p>基本数据类型和引用数据类型的区别：</p><ul><li>在存储上： <ul><li>基本数据类型是存放在栈内存中的简单数据段。</li><li>引用数据类型是存放在堆内存中的对象，在栈内存中存放的是堆内存中具体内容的引用地址，通过这个地址可以快速查找到对象。</li></ul></li><li>在比较上： <ul><li>基本数据类型的比较是值的比较。直接比较值，看起来一样那么他们就是相等的。</li><li>引用数据类型的比较是引用的比较。比较引用地址，也就是比较两个对象保存在栈内存的指向堆内存的地址是否相同，虽然看起来一样，但是如果他们指向堆内存的地址是不一样的，那么两个对象也是不相等的。</li></ul></li><li>在赋值上： <ul><li>基本数据类型的赋值是简单赋值，传值。</li><li>引用数据类型的赋值是对象引用，传址。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;小红&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> changeName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 方法内部的变量，先在方法内部找寻是否声明</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 没有声明，再找寻形参</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 没有形参，再找全局变量是否有声明</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 没有声明，那就自动声明一个该全局变量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;小明&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  user</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;小兰&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">changeName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 方法执行的时候传参就是一个给形参变量赋值的一个过程</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 小明</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,8),t=[n];function h(d,p){return e(),s("div",null,t)}const r=i(l,[["render",h],["__file","数据类型.html.vue"]]),c=JSON.parse('{"path":"/JAVASCRIPT/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"数据类型","lang":"zh-CN","frontmatter":{"description":"数据类型 JavaScript目前包含八种数据类型，其中可以分成基本数据类型和引用数据类型两大类。 基本数据类型（原始值）： Number（数值，包含NaN）。 String（字符串）。 Boolean（布尔值）。 Undefined（未定义/未初始化）。 Null（空对象）。 Symbol（独一无二的值，ES6新增）。 BigInt（大整数，能够表示...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/JAVASCRIPT/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"数据类型"}],["meta",{"property":"og:description","content":"数据类型 JavaScript目前包含八种数据类型，其中可以分成基本数据类型和引用数据类型两大类。 基本数据类型（原始值）： Number（数值，包含NaN）。 String（字符串）。 Boolean（布尔值）。 Undefined（未定义/未初始化）。 Null（空对象）。 Symbol（独一无二的值，ES6新增）。 BigInt（大整数，能够表示..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723009479000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":1.67,"words":500},"filePathRelative":"JAVASCRIPT/数据类型.md","localizedDate":"2024年8月7日","excerpt":"\\n<p><code>JavaScript</code>目前包含八种数据类型，其中可以分成基本数据类型和引用数据类型两大类。</p>\\n<p>基本数据类型（原始值）：</p>\\n<ul>\\n<li><code>Number</code>（数值，包含<code>NaN</code>）。</li>\\n<li><code>String</code>（字符串）。</li>\\n<li><code>Boolean</code>（布尔值）。</li>\\n<li><code>Undefined</code>（未定义/未初始化）。</li>\\n<li><code>Null</code>（空对象）。</li>\\n<li><code>Symbol</code>（独一无二的值，<code>ES6</code>新增）。</li>\\n<li><code>BigInt</code>（大整数，能够表示超过<code>Number</code>类型大小限制的整数，<code>ES2020</code>新增）。</li>\\n</ul>","autoDesc":true}');export{r as comp,c as data};
