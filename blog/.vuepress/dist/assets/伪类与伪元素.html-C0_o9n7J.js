import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as t,f as c}from"./app-C4tUi4gM.js";const r={},d=c('<h1 id="伪类与伪元素" tabindex="-1"><a class="header-anchor" href="#伪类与伪元素"><span>伪类与伪元素</span></a></h1><h2 id="伪类与伪元素的区别" tabindex="-1"><a class="header-anchor" href="#伪类与伪元素的区别"><span>伪类与伪元素的区别</span></a></h2><p><code>css</code>引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。</p><p>伪类用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为动态变化的。比如，当用户悬停在指定的元素时，可以通过<code>:hover</code>来描述这个元素的状态。</p><p>伪元素用于创建一些不在文档树中的元素，并为其添加样式。它们允许为元素的某些部分设置样式。比如，可以通过<code>::before</code>来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</p><p>有时你会发现伪元素使用了两个冒号（<code>::</code>）而不是一个冒号（<code>:</code>）。这是<code>CSS3</code>的一部分，并尝试区分伪类和伪元素。大多数浏览器都支持这两个值。按照规则应该使用（<code>::</code>）而不是（<code>:</code>），从而区分伪类和伪元素。但是，由于在旧版本的<code>W3C规范</code>并未对此进行特别区分，因此目前绝大多数的浏览器都支持使用这两种方式表示伪元素。</p><p><a href="http://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/" target="_blank" rel="noopener noreferrer">《总结伪类与伪元素》</a></p><h2 id="before和-after中双冒号和单冒号的区别" tabindex="-1"><a class="header-anchor" href="#before和-after中双冒号和单冒号的区别"><span><code>::before</code>和<code>::after</code>中双冒号和单冒号的区别</span></a></h2><p>单冒号（<code>:</code>）用于<code>CSS3伪类</code>，双冒号（<code>::</code>）用于<code>CSS3伪元素</code>。（伪元素由双冒号和伪元素名称组成）<br> 双冒号是在当前规范中引入的，用于区分伪类和伪元素。<br> 不过浏览器需要同时支持旧的已经存在的伪元素写法。<br> 比如<code>:first-line</code>、<code>:first-letter</code>、<code>:before</code>、<code>:after</code>等。<br> 而新的在<code>CSS3</code>中引入的伪元素则不允许再支持旧的单冒号的写法。</p><p>想让插入的内容出现在其它内容前，使用<code>::before</code>，否则，使用<code>::after</code>。<br> 在代码顺序上，<code>::after</code>生成的内容也比<code>::before</code>生成的内容靠后。<br> 如果按堆栈视角，<code>::after</code>生成的内容会在<code>::before</code>生成的内容之上。</p><p>总结：</p><p>在<code>CSS3</code>中使用单冒号来表示伪类，用双冒号来表示伪元素。但是为了兼容已有的伪元素的写法，在一些浏览器中也可以使用单冒号来表示伪元素。</p><p>伪类一般匹配的是元素的一些特殊状态，如<code>hover</code>、<code>link</code>等，而伪元素一般匹配的是特殊的位置，比如<code>after</code>、<code>before</code>等。</p>',13),a=[d];function p(n,s){return t(),o("div",null,a)}const h=e(r,[["render",p],["__file","伪类与伪元素.html.vue"]]),m=JSON.parse('{"path":"/CSS/%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0.html","title":"伪类与伪元素","lang":"zh-CN","frontmatter":{"description":"伪类与伪元素 伪类与伪元素的区别 css引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。 伪类用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为动态变化的。比如，当用户悬停在指定的元素时，可以通过:hover来描述这个元素...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/CSS/%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"伪类与伪元素"}],["meta",{"property":"og:description","content":"伪类与伪元素 伪类与伪元素的区别 css引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。 伪类用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为动态变化的。比如，当用户悬停在指定的元素时，可以通过:hover来描述这个元素..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"伪类与伪元素\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"伪类与伪元素的区别","slug":"伪类与伪元素的区别","link":"#伪类与伪元素的区别","children":[]},{"level":2,"title":"::before和::after中双冒号和单冒号的区别","slug":"before和-after中双冒号和单冒号的区别","link":"#before和-after中双冒号和单冒号的区别","children":[]}],"git":{"createdTime":1723630143000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":2.32,"words":695},"filePathRelative":"CSS/伪类与伪元素.md","localizedDate":"2024年8月14日","excerpt":"\\n<h2>伪类与伪元素的区别</h2>\\n<p><code>css</code>引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。</p>\\n<p>伪类用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为动态变化的。比如，当用户悬停在指定的元素时，可以通过<code>:hover</code>来描述这个元素的状态。</p>\\n<p>伪元素用于创建一些不在文档树中的元素，并为其添加样式。它们允许为元素的某些部分设置样式。比如，可以通过<code>::before</code>来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</p>","autoDesc":true}');export{h as comp,m as data};
