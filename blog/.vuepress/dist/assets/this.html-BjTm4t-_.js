import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,f as t}from"./app-C4tUi4gM.js";const a={},n=t(`<h1 id="this" tabindex="-1"><a class="header-anchor" href="#this"><span><code>this</code></span></a></h1><p>在绝大多数情况下，函数的调用方式决定<code>this</code>的值。<code>this</code>不能在执行期间被复制，并且每次函数被调用时<code>this</code>的值也可能会不同。</p><p><code>this</code>的值表示当前执行的环境对象，与声明环境无关，所以<code>this</code>代表的对象要等函数调用才能确定。类似定义函数时的参数列表，只有在函数调用时才传入真正的对象。</p><p><code>this</code>关键字虽然会根据环境变化，但它代表的始终是调用当前函数的对象。</p><p><code>this</code>的调用场景：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  a</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  b</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>作为对象调用时，指向该对象。<code>obj.b(); // 指向 obj</code>。</li><li>作为函数调用时，指向全局<code>window</code>。<code>var b = obj.b; b(); // 指向全局 window</code>。</li><li>作为构造函数调用时，指向当前实例对象。<code>var b = new Fun(); // this 指向当前实例对象</code>。</li><li>作为<code>call</code>与<code>apply</code>调用时，指向当前传入的对象。<code>obj.b.apply(object, []); // this 指向当前的 object</code>。</li></ol>`,7),h=[n];function o(d,l){return e(),s("div",null,h)}const r=i(a,[["render",o],["__file","this.html.vue"]]),k=JSON.parse('{"path":"/JAVASCRIPT/this.html","title":"this","lang":"zh-CN","frontmatter":{"description":"this 在绝大多数情况下，函数的调用方式决定this的值。this不能在执行期间被复制，并且每次函数被调用时this的值也可能会不同。 this的值表示当前执行的环境对象，与声明环境无关，所以this代表的对象要等函数调用才能确定。类似定义函数时的参数列表，只有在函数调用时才传入真正的对象。 this关键字虽然会根据环境变化，但它代表的始终是调用当前...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/JAVASCRIPT/this.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"this"}],["meta",{"property":"og:description","content":"this 在绝大多数情况下，函数的调用方式决定this的值。this不能在执行期间被复制，并且每次函数被调用时this的值也可能会不同。 this的值表示当前执行的环境对象，与声明环境无关，所以this代表的对象要等函数调用才能确定。类似定义函数时的参数列表，只有在函数调用时才传入真正的对象。 this关键字虽然会根据环境变化，但它代表的始终是调用当前..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"this\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723009479000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":0.88,"words":264},"filePathRelative":"JAVASCRIPT/this.md","localizedDate":"2024年8月7日","excerpt":"\\n<p>在绝大多数情况下，函数的调用方式决定<code>this</code>的值。<code>this</code>不能在执行期间被复制，并且每次函数被调用时<code>this</code>的值也可能会不同。</p>\\n<p><code>this</code>的值表示当前执行的环境对象，与声明环境无关，所以<code>this</code>代表的对象要等函数调用才能确定。类似定义函数时的参数列表，只有在函数调用时才传入真正的对象。</p>\\n<p><code>this</code>关键字虽然会根据环境变化，但它代表的始终是调用当前函数的对象。</p>\\n<p><code>this</code>的调用场景：</p>","autoDesc":true}');export{r as comp,k as data};
