import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as c,f as d}from"./app-C4tUi4gM.js";const t={},i=d('<h1 id="常见的请求方式" tabindex="-1"><a class="header-anchor" href="#常见的请求方式"><span>常见的请求方式</span></a></h1><h2 id="常见的请求方式-1" tabindex="-1"><a class="header-anchor" href="#常见的请求方式-1"><span>常见的请求方式</span></a></h2><ol><li><code>GET</code>： 用于请求或访问已经被<code>URI</code>（统一资源标识符）识别的资源，可以通过<code>URL</code>传参给服务器。</li><li><code>POST</code>：用于传输信息给服务器，主要功能与<code>GET</code>方法类似，但一般推荐使用<code>POST</code>方式。</li><li><code>PUT</code>： 传输文件，报文主体中包含文件内容，保存到对应<code>URI</code>位置。</li><li><code>HEAD</code>： 获得报文首部，与<code>GET</code>方法类似，只是不返回报文主体，一般用于验证<code>URI</code>是否有效。</li><li><code>DELETE</code>：删除文件，与<code>PUT</code>方法相反，删除对应<code>URI</code>位置的文件。</li><li><code>OPTIONS</code>：查询相应<code>URI</code>支持的<code>HTTP</code>方法。</li></ol><h2 id="get和post" tabindex="-1"><a class="header-anchor" href="#get和post"><span><code>GET</code>和<code>POST</code></span></a></h2><p><code>GET</code>和<code>POST</code>是表单提交数据的两种基本方式。</p><p>区别：</p><ol><li>功能不同：<br><code>GET</code>是从服务器上获取数据。<br><code>POST</code>是向服务器传送数据。</li><li>过程不同：<br><code>GET</code>是把参数数据队列加到提交表单的<code>ACTION</code>属性所指的<code>URL</code>中，值和表单内各个字段一一对应，在<code>URL</code>中可以看到。<br><code>POST</code>是通过<code>HTTP POST</code>机制，将表单内各个字段与其内容放置在<code>HTML HEADER</code>内一起传送到<code>ACTION</code>属性所指的<code>URL</code>地址。用户看不到这个过程。</li><li>获取值不同：<br> 对于<code>GET</code>方式，服务器端用<code>Request.QueryString</code>获取变量的值。<br> 对于<code>POST</code>方式，服务器端用<code>Request.Form</code>获取提交的数据。</li><li>传送数据量不同：<br><code>GET</code>传送的数据量较小，不能大于<code>2KB</code>。<br><code>POST</code>传送的数据量较大，一般被默认为不受限制。但理论上，<code>IIS4</code>中最大量为<code>80KB</code>，<code>IIS5</code>中为<code>100KB</code>。</li><li>安全性不同：<br><code>GET</code>安全性非常低。<br><code>POST</code>安全性较高。</li></ol><h2 id="什么时候会发送options请求" tabindex="-1"><a class="header-anchor" href="#什么时候会发送options请求"><span>什么时候会发送<code>OPTIONS请求</code></span></a></h2><p><code>OPTIONS请求</code>即预检请求，可用于检测服务器允许的<code>http</code>方法。当发起跨域请求时，由于安全原因，触发一定条件时浏览器会在正式请求之前自动先发起<code>OPTIONS请求</code>，即<code>CORS预检请求</code>，服务器若接受该跨域请求，浏览器才继续发起正式请求。</p><p>触发<code>OPTIONS</code>条件：</p><ol><li>前提是发生跨域请求。</li><li>触发一定条件，例如<code>POST</code>请求的<code>Request headers</code>的<code>content-type</code>为<code>application/json</code>。 注意：1. 必须是<code>Request headers</code>。 2.<code>GET</code>请求设置不了<code>content-type</code>，因为<code>GET</code>会把参数拼接在<code>URL</code>上。</li></ol>',11),l=[i];function a(n,r){return c(),o("div",null,l)}const s=e(t,[["render",a],["__file","常见的请求方式.html.vue"]]),h=JSON.parse('{"path":"/JAVASCRIPT/%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F.html","title":"常见的请求方式","lang":"zh-CN","frontmatter":{"description":"常见的请求方式 常见的请求方式 GET： 用于请求或访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器。 POST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。 PUT： 传输文件，报文主体中包含文件内容，保存到对应URI位置。 HEAD： 获得报文首部，与GET方法类似，只是不返回报文主体，一般用...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/JAVASCRIPT/%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"常见的请求方式"}],["meta",{"property":"og:description","content":"常见的请求方式 常见的请求方式 GET： 用于请求或访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器。 POST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。 PUT： 传输文件，报文主体中包含文件内容，保存到对应URI位置。 HEAD： 获得报文首部，与GET方法类似，只是不返回报文主体，一般用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见的请求方式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"常见的请求方式","slug":"常见的请求方式-1","link":"#常见的请求方式-1","children":[]},{"level":2,"title":"GET和POST","slug":"get和post","link":"#get和post","children":[]},{"level":2,"title":"什么时候会发送OPTIONS请求","slug":"什么时候会发送options请求","link":"#什么时候会发送options请求","children":[]}],"git":{"createdTime":1723009479000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":2.01,"words":604},"filePathRelative":"JAVASCRIPT/常见的请求方式.md","localizedDate":"2024年8月7日","excerpt":"\\n<h2>常见的请求方式</h2>\\n<ol>\\n<li><code>GET</code>： 用于请求或访问已经被<code>URI</code>（统一资源标识符）识别的资源，可以通过<code>URL</code>传参给服务器。</li>\\n<li><code>POST</code>：用于传输信息给服务器，主要功能与<code>GET</code>方法类似，但一般推荐使用<code>POST</code>方式。</li>\\n<li><code>PUT</code>： 传输文件，报文主体中包含文件内容，保存到对应<code>URI</code>位置。</li>\\n<li><code>HEAD</code>： 获得报文首部，与<code>GET</code>方法类似，只是不返回报文主体，一般用于验证<code>URI</code>是否有效。</li>\\n<li><code>DELETE</code>：删除文件，与<code>PUT</code>方法相反，删除对应<code>URI</code>位置的文件。</li>\\n<li><code>OPTIONS</code>：查询相应<code>URI</code>支持的<code>HTTP</code>方法。</li>\\n</ol>","autoDesc":true}');export{s as comp,h as data};
