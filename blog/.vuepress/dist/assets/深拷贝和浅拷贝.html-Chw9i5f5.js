import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o,f as c}from"./app-8HN3oAmX.js";const i={},n=c('<h1 id="深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝"><span>深拷贝和浅拷贝</span></a></h1><p>对象拷贝，简而言之就是将对象再复制一份，但是，复制的方法不同将会得到不同的结果。</p><p>深拷贝和浅拷贝主要是针对对象的属性是对象（引用数据类型）所提出的，对于基本数据类型不存在。</p><p>浅拷贝就是只拷贝一层。</p><p>深拷贝不会像浅拷贝那样只拷贝一层，而是有多少层我就拷贝多少层，要真正的做到全部内容都放在自己新开辟的内存里。可以利用递归思想实现深拷贝。</p><p>浅拷贝：</p><ul><li>扩展运算符（<code>...</code>）</li></ul><p>深拷贝：</p><ul><li><code>JSON.parse(JSON.stringify());</code> 会丢失对象中的<code>undefined</code>，<code>函数</code>，<code>正则</code>。</li><li>递归拷贝。</li><li>借助工具库，如：<code>lodash</code>。</li></ul>',9),p=[n];function a(r,d){return o(),t("div",null,p)}const m=e(i,[["render",a],["__file","深拷贝和浅拷贝.html.vue"]]),h=JSON.parse('{"path":"/JAVASCRIPT/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D.html","title":"深拷贝和浅拷贝","lang":"zh-CN","frontmatter":{"description":"深拷贝和浅拷贝 对象拷贝，简而言之就是将对象再复制一份，但是，复制的方法不同将会得到不同的结果。 深拷贝和浅拷贝主要是针对对象的属性是对象（引用数据类型）所提出的，对于基本数据类型不存在。 浅拷贝就是只拷贝一层。 深拷贝不会像浅拷贝那样只拷贝一层，而是有多少层我就拷贝多少层，要真正的做到全部内容都放在自己新开辟的内存里。可以利用递归思想实现深拷贝。 浅...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/JAVASCRIPT/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"深拷贝和浅拷贝"}],["meta",{"property":"og:description","content":"深拷贝和浅拷贝 对象拷贝，简而言之就是将对象再复制一份，但是，复制的方法不同将会得到不同的结果。 深拷贝和浅拷贝主要是针对对象的属性是对象（引用数据类型）所提出的，对于基本数据类型不存在。 浅拷贝就是只拷贝一层。 深拷贝不会像浅拷贝那样只拷贝一层，而是有多少层我就拷贝多少层，要真正的做到全部内容都放在自己新开辟的内存里。可以利用递归思想实现深拷贝。 浅..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深拷贝和浅拷贝\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723009479000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":0.65,"words":195},"filePathRelative":"JAVASCRIPT/深拷贝和浅拷贝.md","localizedDate":"2024年8月7日","excerpt":"\\n<p>对象拷贝，简而言之就是将对象再复制一份，但是，复制的方法不同将会得到不同的结果。</p>\\n<p>深拷贝和浅拷贝主要是针对对象的属性是对象（引用数据类型）所提出的，对于基本数据类型不存在。</p>\\n<p>浅拷贝就是只拷贝一层。</p>\\n<p>深拷贝不会像浅拷贝那样只拷贝一层，而是有多少层我就拷贝多少层，要真正的做到全部内容都放在自己新开辟的内存里。可以利用递归思想实现深拷贝。</p>\\n<p>浅拷贝：</p>\\n<ul>\\n<li>扩展运算符（<code>...</code>）</li>\\n</ul>\\n<p>深拷贝：</p>\\n<ul>\\n<li><code>JSON.parse(JSON.stringify());</code> 会丢失对象中的<code>undefined</code>，<code>函数</code>，<code>正则</code>。</li>\\n<li>递归拷贝。</li>\\n<li>借助工具库，如：<code>lodash</code>。</li>\\n</ul>","autoDesc":true}');export{m as comp,h as data};
