import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as s,f as t}from"./app-8HN3oAmX.js";const o={},a=t(`<h1 id="vue组件通信" tabindex="-1"><a class="header-anchor" href="#vue组件通信"><span><code>vue</code>组件通信</span></a></h1><ol><li><code>props</code>：<br> 父组件向子组件传值：<code>props</code>。<br> 子组件向父组件传值：父组件向子组件通过事件形式传递<code>props</code>，子组件通过<code>events</code>给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。</li><li><code>$emit/$on</code>。这种方法通过一个空的<code>vue</code>实例作为中央事件总线（事件中心），用它来触发事件和监听事件，巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级。<code>vue3</code>使用<code>mitt</code> 插件（<code>emit</code>触发、<code>on</code>监听、<code>off</code>移除监听）。</li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> Event</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">事件名</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">数据</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">事件名</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>状态管理。如：<code>vuex</code>。</li><li><code>provide/inject</code>。祖先组件中通过<code>provide</code>来提供变量，然后在子孙组件中通过<code>inject</code>来注入变量。可以实现跨级组件间通信。</li><li><code>$parent/$children</code>与<code>ref</code>。<br><code>$parent/$children</code>：访问父 / 子实例。<br><code>ref</code>：如果在普通的<code>DOM元素</code>上使用，引用指向的就是<code>DOM元素</code>，如果在子组件上使用，引用指向的就是组件实例。</li></ol>`,4),n=[a];function d(c,r){return s(),i("div",null,n)}const h=e(o,[["render",d],["__file","vue组件通信.html.vue"]]),k=JSON.parse('{"path":"/VUE/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1.html","title":"vue组件通信","lang":"zh-CN","frontmatter":{"description":"vue组件通信 props： 父组件向子组件传值：props。 子组件向父组件传值：父组件向子组件通过事件形式传递props，子组件通过events给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。 $emit/$on。这种方法通过一个空的vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件，巧妙而轻量地实现了任何组件间的通信，包...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/VUE/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"vue组件通信"}],["meta",{"property":"og:description","content":"vue组件通信 props： 父组件向子组件传值：props。 子组件向父组件传值：父组件向子组件通过事件形式传递props，子组件通过events给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。 $emit/$on。这种方法通过一个空的vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件，巧妙而轻量地实现了任何组件间的通信，包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue组件通信\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723794615000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":0.94,"words":282},"filePathRelative":"VUE/vue组件通信.md","localizedDate":"2024年8月16日","excerpt":"\\n<ol>\\n<li><code>props</code>：<br>\\n父组件向子组件传值：<code>props</code>。<br>\\n子组件向父组件传值：父组件向子组件通过事件形式传递<code>props</code>，子组件通过<code>events</code>给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。</li>\\n<li><code>$emit/$on</code>。这种方法通过一个空的<code>vue</code>实例作为中央事件总线（事件中心），用它来触发事件和监听事件，巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级。<code>vue3</code>使用<code>mitt</code> 插件（<code>emit</code>触发、<code>on</code>监听、<code>off</code>移除监听）。</li>\\n</ol>","autoDesc":true}');export{h as comp,k as data};
