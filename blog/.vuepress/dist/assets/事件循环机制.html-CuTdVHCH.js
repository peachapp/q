import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as c,f as t}from"./app-8HN3oAmX.js";const d={},i=t('<h1 id="事件循环机制" tabindex="-1"><a class="header-anchor" href="#事件循环机制"><span>事件循环机制</span></a></h1><h2 id="事件循环机制-event-loop" tabindex="-1"><a class="header-anchor" href="#事件循环机制-event-loop"><span>事件循环机制（<code>event loop</code>）</span></a></h2><blockquote><p><code>JS</code>引擎并不是独立运行的，它运行在宿主环境中，对多数开发者来说通常就是<code>web浏览器</code>。经过最近几年的发展，<code>JS</code>已经超出了浏览器的范围，进入了其他环境。<br> 所以这些环境都有一个共同“点”(<code>thread</code>, 也指线程）, 即它们都提供了一种机制来处理程序中多个块的执行，且执行每个块时调用<code>JS</code>引擎，这种机制被称为事件循环。</p></blockquote><p><code>JS</code>引擎的两大特点：</p><ol><li>单线程：只有一个主线程来处理任务。</li><li>非阻塞：当执行异步任务时，不必等到结果返回，主线程会挂起（<code>pending</code>）这个任务，然后根据一定规则执行回调函数（事件循环机制）。</li></ol><blockquote><p><code>JS</code>通常是非阻塞的，除了某些特殊情况，<code>JS</code>会停止代码执行：<code>alert</code>、<code>confirm</code>、<code>prompt</code>（除了<code>Opera</code>）、“页面上的程序正忙”的系统对话框弹出。</p></blockquote><p>事件循环机制又名<code>event loop</code>，主要分三部分：</p><ol><li>主线程。</li><li>宏任务队列（<code>macrotask</code>）。</li><li>微任务队列（<code>microtask</code>）。</li></ol><p><code>JS</code>的任务队列分为同步任务和异步任务，所有的同步任务都是在主线程里执行的，异步任务可能会在<code>macrotask</code>或者<code>microtask</code>里面。</p><p>主线程：</p><blockquote><p>就是访问到的<code>script</code>标签里面包含的内容，或者是直接访问某一个<code>js文件</code>的时候，里面的可以在当前作用域直接执行的所有内容（执行的方法、<code>new</code>出来的对象）。</p></blockquote><p>任务分类：</p><ol><li>同步任务：会立即执行的任务。</li><li>异步任务：不会立即执行的任务，可细分为宏任务（<code>macrotask</code>）和微任务（<code>microtask</code>）。</li></ol><blockquote><p>宏任务：<code>script</code>、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmeditate</code>、<code>T/O</code>、<code>UI rendering</code><br> 微任务：<code>process</code>、<code>nextTick</code>、<code>Promise.then()</code>、<code>object.observe</code>、<code>MutationObserver</code></p></blockquote><p>宏任务优先级：</p><p>主代码块 &gt; <code>setImmediate</code> &gt; <code>MessageChannel</code> &gt; <code>setTimeout / setInterval</code></p><p>微任务优先级：</p><p><code>process.nextTick</code> &gt; <code>Promise</code> = <code>MutationObserver</code></p><p>执行顺序：</p><ol><li>先执行主线程。</li><li>遇到宏任务放到宏队列（<code>macrotask</code>）。</li><li>遇到微任务放到微队列（<code>microtask</code>）。</li><li>主线程执行完毕。</li><li>执行微队列（<code>microtask</code>），微队列（<code>microtask</code>）执行完毕。</li><li>执行一次宏队列（<code>macrotask</code>）中的一个任务，执行完毕。</li><li>执行微队列（<code>microtask</code>），执行完毕。</li><li>依次循环。</li></ol><p>执行栈和任务队列：</p><p>栈内存和堆内存：栈内存保存着<code>JS</code>的变量和指向堆内存中对象的指针，堆内存保存着对象。</p><p>执行栈：</p><blockquote><p>后进先出的数据结构，当函数被调用时添加到执行栈顶部，从栈顶移出。当一个任务为同步任务时，则会被立即执行，执行完移出；如果是异步任务，则会交给异步处理模块处理，当异步任务回调达到触发条件时，会将回调函数添加到任务队列中，如果是宏任务，则添加到宏任务队列中，如果是微任务，则添加到微任务队列中。</p></blockquote><p>任务队列：</p><blockquote><p>任务队列读取任务的顺序为宏任务 --&gt; 微任务（微任务队列全部执行结束才进入到下一轮宏任务）--&gt; 宏任务 --&gt; 微任务的顺序；当执行栈中的任务全部完成之后会从事件队列中读取一个任务添加到执行栈。一个任务队列中可以有多个宏任务队列，但只能有一个微任务队列。</p></blockquote><p>引入微任务队列后，事实上事件循环执行的流程是这样的：</p><ol><li>一开始把一整段的<code>JS</code>脚本作为第一个宏任务执行。</li><li>在执行过程中，同步代码则直接运行，过程中存在宏任务则进入到宏任务队列，微任务则进入到微任务队列。</li><li>在当前宏任务执行完成后，检查微任务队列，若存在微任务则按序全部执行完毕。</li><li>继续检查宏任务队列，执行下一个宏任务，如此反复。</li></ol><blockquote><p>从规范来看，微任务（<code>microtask</code>）优先于宏任务（<code>macrotask</code>） 执行，所以如果有需要优先执行的逻辑，放入微任务队列会比宏任务更早的被执行。</p></blockquote><h2 id="settimeout和promise和async-await" tabindex="-1"><a class="header-anchor" href="#settimeout和promise和async-await"><span><code>setTimeout</code>和<code>Promise</code>和<code>async await</code></span></a></h2><p><code>setTimeout</code>属于宏任务。<br><code>Promise</code>本身是同步的，但在执行<code>resolve</code>或者<code>reject</code>时是异步的，即里面的<code>then</code>方法是异步的，属于微任务。<br><code>async/await</code>中<code>await</code>后面紧跟的表达式是同步的，但接下来的代码是异步的，属于微任务。</p><p>Promise 本身是同步的，但在执行 resolve 或者 reject 时是异步的，即 then 方法是异步的。</p>',32),a=[i];function l(r,p){return c(),o("div",null,a)}const m=e(d,[["render",l],["__file","事件循环机制.html.vue"]]),h=JSON.parse('{"path":"/JAVASCRIPT/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html","title":"事件循环机制","lang":"zh-CN","frontmatter":{"description":"事件循环机制 事件循环机制（event loop） JS引擎并不是独立运行的，它运行在宿主环境中，对多数开发者来说通常就是web浏览器。经过最近几年的发展，JS已经超出了浏览器的范围，进入了其他环境。 所以这些环境都有一个共同“点”(thread, 也指线程）, 即它们都提供了一种机制来处理程序中多个块的执行，且执行每个块时调用JS引擎，这种机制被称为...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/JAVASCRIPT/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"事件循环机制"}],["meta",{"property":"og:description","content":"事件循环机制 事件循环机制（event loop） JS引擎并不是独立运行的，它运行在宿主环境中，对多数开发者来说通常就是web浏览器。经过最近几年的发展，JS已经超出了浏览器的范围，进入了其他环境。 所以这些环境都有一个共同“点”(thread, 也指线程）, 即它们都提供了一种机制来处理程序中多个块的执行，且执行每个块时调用JS引擎，这种机制被称为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件循环机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"事件循环机制（event loop）","slug":"事件循环机制-event-loop","link":"#事件循环机制-event-loop","children":[]},{"level":2,"title":"setTimeout和Promise和async await","slug":"settimeout和promise和async-await","link":"#settimeout和promise和async-await","children":[]}],"git":{"createdTime":1723009479000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":3.95,"words":1186},"filePathRelative":"JAVASCRIPT/事件循环机制.md","localizedDate":"2024年8月7日","excerpt":"\\n<h2>事件循环机制（<code>event loop</code>）</h2>\\n<blockquote>\\n<p><code>JS</code>引擎并不是独立运行的，它运行在宿主环境中，对多数开发者来说通常就是<code>web浏览器</code>。经过最近几年的发展，<code>JS</code>已经超出了浏览器的范围，进入了其他环境。<br>\\n所以这些环境都有一个共同“点”(<code>thread</code>, 也指线程）, 即它们都提供了一种机制来处理程序中多个块的执行，且执行每个块时调用<code>JS</code>引擎，这种机制被称为事件循环。</p>\\n</blockquote>","autoDesc":true}');export{m as comp,h as data};
