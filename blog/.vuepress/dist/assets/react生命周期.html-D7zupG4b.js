import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as t,f as c}from"./app-C4tUi4gM.js";const d={},n=c('<h1 id="react生命周期" tabindex="-1"><a class="header-anchor" href="#react生命周期"><span><code>react</code>生命周期</span></a></h1><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><ol><li><p>初始化阶段：当组件实例被创建并挂载到<code>DOM</code>中时，会执行这些生命周期方法。</p><ul><li><code>constructor()</code>：构造函数，用于初始化组件的状态和绑定事件处理函数等。</li><li><code>static getDerivedStateFromProps()</code>：该方法用于根据<code>props</code>的变化更新组件的状态。它接收两个参数：<code>props</code>和<code>state</code>，并返回一个新的<code>state</code>对象。在该方法中，应该避免使用<code>this</code>关键字，因为它不能访问组件的实例。</li><li><code>render()</code>：<code>render</code>方法是<code>react</code>组件的核心方法，用于根据<code>props</code>和<code>state</code>生成虚拟<code>DOM</code>。</li><li><code>componentDidMount()</code>：组件已经被插入到<code>DOM</code>中后调用，通常用于发送网络请求、获取数据等副作用操作。</li></ul></li><li><p>更新阶段：当组件的<code>props</code>或<code>state</code>发生变化时，会执行这些生命周期方法。</p><ul><li><code>static getDerivedStateFromProps()</code>：更新组件的状态，与初始化阶段（挂载阶段）相同。</li><li><code>shouldComponentUpdate()</code>：该方法用于判断组件是否需要更新，返回一个布尔值。默认情况下，每次父组件更新都会导致子组件的更新，但是在性能要求较高的场景下，我们可以通过重写这个方法来避免无必要的更新。深比较的话性能比较差了。又想实现深比较的效果，又想性能好，就得靠<code>immuertablejs</code>（以前）、<code>immer</code>（现在）来实现。</li><li><code>render()</code>：更新组件的虚拟<code>DOM</code>。</li><li><code>getSnapshotBeforeUpdate()</code>：</li><li><code>componentDidUpdate()</code>：组件更新完成后调用，通常用于处理更新后的<code>DOM</code>操作、网络请求等副作用操作。</li></ul></li><li><p>卸载阶段：当组件从<code>DOM</code>中卸载时，会执行这个生命周期方法。</p><ul><li><code>componentWillUnmount()</code>：组件即将被卸载时调用，用于清理组件并处理一些必要的操作，例如清除定时器、取消网络请求等。</li></ul></li></ol><blockquote><p>注意：为了给异步操作让步，<code>componentWillMount</code> <code>componentWillUpdate</code> <code>componentWillReceiveProps</code>这三个生命周期被废弃了。</p></blockquote><h2 id="合理地管理组件生命周期" tabindex="-1"><a class="header-anchor" href="#合理地管理组件生命周期"><span>合理地管理组件生命周期</span></a></h2><ol><li>避免在<code>render()</code>方法中进行副作用操作。<br><code>render()</code>方法负责生成组件的虚拟<code>DOM</code>，并且应保持纯净，不应该包含任何副作用操作。副作用操作包括网络请求、事件绑定等。应该在<code>componentDidMount()</code>和<code>componentDidUpdate()</code>方法中执行这些操作。</li><li>使用<code>shouldComponentUpdate()</code>优化性能。<br> 在默认情况下，<code>react</code>会自动更新所有的子组件。但是在一些情况下，一些子组件并不需要被更新，这时我们可以重写<code>shouldComponentUpdate()</code>方法，根据确定是否需要更新组件。这样可以减少不必要的<code>DOM</code>操作，提高应用性能。</li><li>合理使用<code>getDerivedStateFromProps()</code>方法。<br> 在<code>react16.3</code>版本之后，新增了<code>getDerivedStateFromProps()</code>方法，用于更新组件状态。但是，由于该方法会在每次渲染时都被调用，频繁地在该方法中修改状态可能会导致性能问题。因此，应该尽量避免在该方法中进行复杂的操作。</li><li>正确地处理异步操作。<br> 在组件中经常会涉及到异步操作，例如网络请求、定时器等。在处理这些异步操作时，我们应该合理地使用<code>componentDidMount()</code>和<code>componentWillUnmount()</code>方法，确保在组件初始化时进行相关操作，并在组件卸载时及时进行清理工作，避免内存泄漏等问题。</li></ol><h2 id="在shouldcomponentupdate或componentwillupdate中使用setstate会发生什么" tabindex="-1"><a class="header-anchor" href="#在shouldcomponentupdate或componentwillupdate中使用setstate会发生什么"><span>在<code>shouldComponentUpdate</code>或<code>componentWillUpdate</code>中使用<code>setState</code>会发生什么？</span></a></h2><p>当调用<code>setState</code>的时候，实际上会将新的<code>state</code>合并到状态更新队列中，并对<code>partialState</code>以及<code>_pendingStateQueue</code>更新队列进行合并操作。最终通过<code>enqueueUpdate</code>执行<code>state</code>更新。</p><p>如果在<code>shouldComponentUpdate</code>或<code>componentWillUpdate</code>中使用<code>setState</code>，会使得<code>state</code>队列（<code>_pendingStateQueue</code>）不为<code>null</code>，从而调用<code>updateComponent</code>方法，<code>updateComponent</code>中会继续调用<code>shouldComponentUpdate</code>和<code>componentWillUpdate</code>，因此造成死循环。</p>',9),l=[n];function a(p,i){return t(),o("div",null,l)}const m=e(d,[["render",a],["__file","react生命周期.html.vue"]]),u=JSON.parse('{"path":"/REACT/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","title":"react生命周期","lang":"zh-CN","frontmatter":{"description":"react生命周期 生命周期 初始化阶段：当组件实例被创建并挂载到DOM中时，会执行这些生命周期方法。 constructor()：构造函数，用于初始化组件的状态和绑定事件处理函数等。 static getDerivedStateFromProps()：该方法用于根据props的变化更新组件的状态。它接收两个参数：props和state，并返回一个新的...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/REACT/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"react生命周期"}],["meta",{"property":"og:description","content":"react生命周期 生命周期 初始化阶段：当组件实例被创建并挂载到DOM中时，会执行这些生命周期方法。 constructor()：构造函数，用于初始化组件的状态和绑定事件处理函数等。 static getDerivedStateFromProps()：该方法用于根据props的变化更新组件的状态。它接收两个参数：props和state，并返回一个新的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"🍑"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"react生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":2,"title":"合理地管理组件生命周期","slug":"合理地管理组件生命周期","link":"#合理地管理组件生命周期","children":[]},{"level":2,"title":"在shouldComponentUpdate或componentWillUpdate中使用setState会发生什么？","slug":"在shouldcomponentupdate或componentwillupdate中使用setstate会发生什么","link":"#在shouldcomponentupdate或componentwillupdate中使用setstate会发生什么","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.2,"words":961},"filePathRelative":"REACT/react生命周期.md","excerpt":"\\n<h2>生命周期</h2>\\n<ol>\\n<li>\\n<p>初始化阶段：当组件实例被创建并挂载到<code>DOM</code>中时，会执行这些生命周期方法。</p>\\n<ul>\\n<li><code>constructor()</code>：构造函数，用于初始化组件的状态和绑定事件处理函数等。</li>\\n<li><code>static getDerivedStateFromProps()</code>：该方法用于根据<code>props</code>的变化更新组件的状态。它接收两个参数：<code>props</code>和<code>state</code>，并返回一个新的<code>state</code>对象。在该方法中，应该避免使用<code>this</code>关键字，因为它不能访问组件的实例。</li>\\n<li><code>render()</code>：<code>render</code>方法是<code>react</code>组件的核心方法，用于根据<code>props</code>和<code>state</code>生成虚拟<code>DOM</code>。</li>\\n<li><code>componentDidMount()</code>：组件已经被插入到<code>DOM</code>中后调用，通常用于发送网络请求、获取数据等副作用操作。</li>\\n</ul>\\n</li>\\n<li>\\n<p>更新阶段：当组件的<code>props</code>或<code>state</code>发生变化时，会执行这些生命周期方法。</p>\\n<ul>\\n<li><code>static getDerivedStateFromProps()</code>：更新组件的状态，与初始化阶段（挂载阶段）相同。</li>\\n<li><code>shouldComponentUpdate()</code>：该方法用于判断组件是否需要更新，返回一个布尔值。默认情况下，每次父组件更新都会导致子组件的更新，但是在性能要求较高的场景下，我们可以通过重写这个方法来避免无必要的更新。深比较的话性能比较差了。又想实现深比较的效果，又想性能好，就得靠<code>immuertablejs</code>（以前）、<code>immer</code>（现在）来实现。</li>\\n<li><code>render()</code>：更新组件的虚拟<code>DOM</code>。</li>\\n<li><code>getSnapshotBeforeUpdate()</code>：</li>\\n<li><code>componentDidUpdate()</code>：组件更新完成后调用，通常用于处理更新后的<code>DOM</code>操作、网络请求等副作用操作。</li>\\n</ul>\\n</li>\\n<li>\\n<p>卸载阶段：当组件从<code>DOM</code>中卸载时，会执行这个生命周期方法。</p>\\n<ul>\\n<li><code>componentWillUnmount()</code>：组件即将被卸载时调用，用于清理组件并处理一些必要的操作，例如清除定时器、取消网络请求等。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{m as comp,u as data};
