import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as d,f as c}from"./app-C4tUi4gM.js";const t={},a=c('<h1 id="vue生命周期和钩子函数" tabindex="-1"><a class="header-anchor" href="#vue生命周期和钩子函数"><span><code>vue</code>生命周期和钩子函数</span></a></h1><p><code>vue</code>生命周期钩子是成对出现的：分别是创建前后、挂载前后、更新前后、销毁前后。</p><h2 id="vue2生命周期" tabindex="-1"><a class="header-anchor" href="#vue2生命周期"><span><code>vue2</code>生命周期</span></a></h2><ol><li><code>beforeCreate</code>（创建前）：创建组件实例前的钩子函数，此时<code>data</code>还没有挂载。</li><li><code>created</code>（创建后）：组件实例创建完成之后的钩子函数，此时<code>data</code>已经挂载，在这个阶段开始有<code>$data</code>。</li><li><code>beforeMount</code>（挂载前）：开始挂载编译生成的<code>HTML</code>到对应位置时触发的钩子函数。此时还未将编译出的<code>HTML</code>渲染到页面上。</li><li><code>mounted</code>（挂载后）：将编译好的<code>HTML</code>挂载到页面后执行的钩子函数，在这个阶段开始有<code>$el</code>。</li><li><code>beforeUpdate</code>（更新前）：数据更改，导致<code>DOM</code>更新之前。</li><li><code>updated</code>（更新后）：数据更改，导致<code>DOM</code>更新之后，<code>updated</code>执行时，页面和<code>data</code>数据已经保持同步，都是最新的。</li><li><code>beforeDestroy</code>（销毁前）：组件实例销毁之前执行的钩子函数。</li><li><code>destroyed</code>（销毁后）：当执行<code>destroyed</code>函数时，组件已经被完全销毁，此时组件中所有<code>data</code>、<code>methods</code>、以及过滤器、指令等都已经不可用了。</li></ol><h2 id="vue3生命周期" tabindex="-1"><a class="header-anchor" href="#vue3生命周期"><span><code>vue3</code>生命周期</span></a></h2><ul><li><code>vue3</code>删除了<code>beforeCreate</code>和<code>created</code>，用<code>setup</code>代替。</li><li><code>vue3</code>删除了<code>beforeDestroy</code>，用<code>onBrforeUnmount</code>代替。</li><li><code>vue3</code>删除了<code>destroyed</code>，用<code>onUnmounted</code>代替。</li></ul><ol><li><code>onBeforeMount</code></li><li><code>onMounted</code></li><li><code>onBeforeUpdate</code></li><li><code>onUpdated</code></li><li><code>onBrforeUnmount</code></li><li><code>onUnmounted</code></li></ol><h2 id="钩子函数" tabindex="-1"><a class="header-anchor" href="#钩子函数"><span>钩子函数</span></a></h2><ul><li>八个生命周期钩子函数。</li><li><code>activated</code>（激活）和 <code>deactivated</code>（未激活）：这两个钩子一般配合<code>&lt;keep-alive&gt;</code>来使用。<br> 通常一个组件是很大的，如果一直创建、销毁、创建、销毁。这样很不合理，而且很浪费性能，这时候就可以用<code>&lt;keep-alive&gt;</code>配合这两个钩子函数来控制组件的激活和不激活。在<code>vue3</code>，对应的是<code>onActivated</code>和<code>onDeactivated</code>。</li><li><code>errorCaptured</code>：当捕获一个来自子孙组件的错误时被调用。<br> 当子孙组件报错的时候，父组件会触发这个钩子函数，并且会返回三个参数。第一个参数是：错误对象，第二个参数是：错误的组件实例（报错的子孙组件），第三个参数是：包含错误来源信息的字符串（报错的子孙组件的具体哪个地方报错）。在<code>vue3</code>，对应的是<code>onErrorCaptured</code>。</li><li><code>renderTracked</code>：在<code>vue3</code>，对应的是<code>onRenderTracked</code>。</li><li><code>renderTriggered</code>：在<code>vue3</code>，对应的是<code>onRenderTriggered</code>。</li><li><code>serverPrefetch</code>：在<code>vue3</code>，对应的是<code>onServerPrefetch</code>。</li></ul><h2 id="第一次或第n次加载组件触发的生命周期" tabindex="-1"><a class="header-anchor" href="#第一次或第n次加载组件触发的生命周期"><span>第一次或第<code>N</code>次加载组件触发的生命周期</span></a></h2><ul><li>第一次加载组件触发的生命周期：<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>。</li><li>如果加入了<code>keep-alive</code>，第一次加载组件触发的生命周期：<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>、<code>activated</code>。</li><li>如果加入了<code>keep-alive</code>，第二次或第<code>N</code>次加载组件触发的生命周期：<code>activated</code>。</li></ul><h2 id="vue父子组件生命周期执行顺序" tabindex="-1"><a class="header-anchor" href="#vue父子组件生命周期执行顺序"><span><code>vue</code>父子组件生命周期执行顺序</span></a></h2><ul><li>加载渲染过程：父组件<code>beforeCreate</code> --&gt; 父组件<code>created</code> --&gt; 父组件<code>beforeMount</code> --&gt; 子组件<code>beforeCreate</code> --&gt; 子组件<code>created</code> --&gt; 子组件<code>beforeMount</code> --&gt; 子组件<code>mounted</code> -&gt; 父组件<code>mounted</code>。</li><li>子组件更新过程：父组件<code>beforeUpdate</code> --&gt; 子组件<code>beforeUpdate</code> --&gt; 子组件<code>updated</code> --&gt; 父组件<code>updated</code>。</li><li>父组件更新过程：父组件<code>beforeUpdate</code> --&gt; 父组件<code>updated</code>。</li><li>销毁过程：父组件<code>beforeDestroy</code> --&gt; 子组件<code>beforeDestroy</code> --&gt; 子组件<code>destroyed</code> --&gt; 父组件<code>destroyed</code>。</li></ul>',13),r=[a];function i(l,n){return d(),o("div",null,r)}const s=e(t,[["render",i],["__file","vue生命周期.html.vue"]]),h=JSON.parse('{"path":"/VUE/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","title":"vue生命周期和钩子函数","lang":"zh-CN","frontmatter":{"description":"vue生命周期和钩子函数 vue生命周期钩子是成对出现的：分别是创建前后、挂载前后、更新前后、销毁前后。 vue2生命周期 beforeCreate（创建前）：创建组件实例前的钩子函数，此时data还没有挂载。 created（创建后）：组件实例创建完成之后的钩子函数，此时data已经挂载，在这个阶段开始有$data。 beforeMount（挂载前）...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/VUE/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"vue生命周期和钩子函数"}],["meta",{"property":"og:description","content":"vue生命周期和钩子函数 vue生命周期钩子是成对出现的：分别是创建前后、挂载前后、更新前后、销毁前后。 vue2生命周期 beforeCreate（创建前）：创建组件实例前的钩子函数，此时data还没有挂载。 created（创建后）：组件实例创建完成之后的钩子函数，此时data已经挂载，在这个阶段开始有$data。 beforeMount（挂载前）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-28T07:24:37.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-28T07:24:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue生命周期和钩子函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-28T07:24:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"vue2生命周期","slug":"vue2生命周期","link":"#vue2生命周期","children":[]},{"level":2,"title":"vue3生命周期","slug":"vue3生命周期","link":"#vue3生命周期","children":[]},{"level":2,"title":"钩子函数","slug":"钩子函数","link":"#钩子函数","children":[]},{"level":2,"title":"第一次或第N次加载组件触发的生命周期","slug":"第一次或第n次加载组件触发的生命周期","link":"#第一次或第n次加载组件触发的生命周期","children":[]},{"level":2,"title":"vue父子组件生命周期执行顺序","slug":"vue父子组件生命周期执行顺序","link":"#vue父子组件生命周期执行顺序","children":[]}],"git":{"createdTime":1723794615000,"updatedTime":1724829877000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":2}]},"readingTime":{"minutes":2.67,"words":801},"filePathRelative":"VUE/vue生命周期.md","localizedDate":"2024年8月16日","excerpt":"\\n<p><code>vue</code>生命周期钩子是成对出现的：分别是创建前后、挂载前后、更新前后、销毁前后。</p>\\n<h2><code>vue2</code>生命周期</h2>\\n<ol>\\n<li><code>beforeCreate</code>（创建前）：创建组件实例前的钩子函数，此时<code>data</code>还没有挂载。</li>\\n<li><code>created</code>（创建后）：组件实例创建完成之后的钩子函数，此时<code>data</code>已经挂载，在这个阶段开始有<code>$data</code>。</li>\\n<li><code>beforeMount</code>（挂载前）：开始挂载编译生成的<code>HTML</code>到对应位置时触发的钩子函数。此时还未将编译出的<code>HTML</code>渲染到页面上。</li>\\n<li><code>mounted</code>（挂载后）：将编译好的<code>HTML</code>挂载到页面后执行的钩子函数，在这个阶段开始有<code>$el</code>。</li>\\n<li><code>beforeUpdate</code>（更新前）：数据更改，导致<code>DOM</code>更新之前。</li>\\n<li><code>updated</code>（更新后）：数据更改，导致<code>DOM</code>更新之后，<code>updated</code>执行时，页面和<code>data</code>数据已经保持同步，都是最新的。</li>\\n<li><code>beforeDestroy</code>（销毁前）：组件实例销毁之前执行的钩子函数。</li>\\n<li><code>destroyed</code>（销毁后）：当执行<code>destroyed</code>函数时，组件已经被完全销毁，此时组件中所有<code>data</code>、<code>methods</code>、以及过滤器、指令等都已经不可用了。</li>\\n</ol>","autoDesc":true}');export{s as comp,h as data};
