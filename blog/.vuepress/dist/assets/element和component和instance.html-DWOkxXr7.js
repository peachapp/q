import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as t,f as n}from"./app-C4tUi4gM.js";const c={},d=n('<h1 id="element和component和instance" tabindex="-1"><a class="header-anchor" href="#element和component和instance"><span><code>element</code>和<code>component</code>和<code>instance</code></span></a></h1><p>一个元素<code>element</code>是一个普通对象（<code>plain object</code>），描述了对于一个<code>DOM节点</code>或者其他组件<code>component</code>，你想让它在屏幕上呈现成什么样子。元素<code>element</code>可以在它的属性<code>props</code>中包含其他元素（用于形成元素树）。创建一个<code>react</code>元素<code>element</code>成本很低。元素<code>element</code>创建之后是不可变的。</p><p>一个组件<code>component</code>可以通过多种方式声明。可以是带有一个<code>render()</code>方法的类，简单点也可以定义为一个函数。这两种情况下，它都把属性<code>props</code>作为输入，把返回的一棵元素树作为输出。</p><p>一个实例<code>instance</code>是你在所写的组件类<code>component class</code>中使用关键字<code>this</code>所指向的东西（组件实例）。它用来存储本地状态和响应生命周期事件很有用。</p><p>函数组件（<code>Functional component</code>）根本没有实例<code>instance</code>。类组件（<code>Class component</code>）有实例<code>instance</code>，但是永远也不需要直接创建一个组件的实例，因为<code>react</code>帮你做了这些。</p>',5),p=[d];function m(a,r){return t(),o("div",null,p)}const i=e(c,[["render",m],["__file","element和component和instance.html.vue"]]),h=JSON.parse('{"path":"/REACT/element%E5%92%8Ccomponent%E5%92%8Cinstance.html","title":"element和component和instance","lang":"zh-CN","frontmatter":{"description":"element和component和instance 一个元素element是一个普通对象（plain object），描述了对于一个DOM节点或者其他组件component，你想让它在屏幕上呈现成什么样子。元素element可以在它的属性props中包含其他元素（用于形成元素树）。创建一个react元素element成本很低。元素element创建之...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/REACT/element%E5%92%8Ccomponent%E5%92%8Cinstance.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"element和component和instance"}],["meta",{"property":"og:description","content":"element和component和instance 一个元素element是一个普通对象（plain object），描述了对于一个DOM节点或者其他组件component，你想让它在屏幕上呈现成什么样子。元素element可以在它的属性props中包含其他元素（用于形成元素树）。创建一个react元素element成本很低。元素element创建之..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"🍑"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"element和component和instance\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.91,"words":273},"filePathRelative":"REACT/element和component和instance.md","excerpt":"\\n<p>一个元素<code>element</code>是一个普通对象（<code>plain object</code>），描述了对于一个<code>DOM节点</code>或者其他组件<code>component</code>，你想让它在屏幕上呈现成什么样子。元素<code>element</code>可以在它的属性<code>props</code>中包含其他元素（用于形成元素树）。创建一个<code>react</code>元素<code>element</code>成本很低。元素<code>element</code>创建之后是不可变的。</p>\\n<p>一个组件<code>component</code>可以通过多种方式声明。可以是带有一个<code>render()</code>方法的类，简单点也可以定义为一个函数。这两种情况下，它都把属性<code>props</code>作为输入，把返回的一棵元素树作为输出。</p>","autoDesc":true}');export{i as comp,h as data};
