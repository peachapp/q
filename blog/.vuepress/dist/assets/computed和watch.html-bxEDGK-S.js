import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as t,f as c}from"./app-8HN3oAmX.js";const d={},p=c('<h1 id="computed和watch" tabindex="-1"><a class="header-anchor" href="#computed和watch"><span><code>computed</code>和<code>watch</code></span></a></h1><p><code>computed</code>：是组件的计算属性。具有缓存性，如果依赖的属性没有变化，就不会重新计算。页面重新渲染时值不变化，计算属性会立即返回之前的计算结果，而不必再次执行函数。（<code>getter/setter</code>默认不会做缓存，<code>vue</code>做了特殊处理，实现了缓存）。</p><p>特点：</p><ol><li><code>computed</code>用来计算出一个值，这个值在使用的时候不需要加括号，像<code>data</code>一样直接使用。</li><li>根据依赖自动缓存，如果依赖不变<code>computed</code>值就不会重新计算。</li><li>不支持异步，<code>computed</code>内不可以有异步操作。它需要返回值，因此不可以使用异步操作。（在<code>JavaScript</code>中，<code>return</code>语句是同步的）【如果在<code>computed</code>属性中使用异步操作，就会导致计算结果不稳定，而且在异步操作完成前，<code>computed</code>属性无法返回结果（<code>return</code>），这也违背了<code>computed</code>属性的设计初表。因此，<code>vue</code>不支持在<code>computed</code>属性中使用异步操作。】</li></ol><p><code>watch</code>：是组件观察的一个动作。无缓存性，页面重新渲染时值不变化也会执行。<code>watch</code>的主要用途是在数据变化时执行一些副作用（执行一个函数），而不直接返回一个新的值。</p><p>特点：</p><ol><li><code>watch</code>是用来监听的，它有两个选项<code>immediate</code>和<code>deep</code>。</li><li><code>immediate</code>表示是否在第一次渲染的时候执行这个函数。<code>deep</code>表示如果监听一个对象，是否要监听里面的属性的变化。</li><li>支持异步，<code>watch</code>内可以有异步操作。它不需要返回值，因此可以使用异步操作。</li></ol>',7),a=[p];function r(m,i){return t(),o("div",null,a)}const l=e(d,[["render",r],["__file","computed和watch.html.vue"]]),h=JSON.parse('{"path":"/VUE/computed%E5%92%8Cwatch.html","title":"computed和watch","lang":"zh-CN","frontmatter":{"description":"computed和watch computed：是组件的计算属性。具有缓存性，如果依赖的属性没有变化，就不会重新计算。页面重新渲染时值不变化，计算属性会立即返回之前的计算结果，而不必再次执行函数。（getter/setter默认不会做缓存，vue做了特殊处理，实现了缓存）。 特点： computed用来计算出一个值，这个值在使用的时候不需要加括号，像d...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/VUE/computed%E5%92%8Cwatch.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"computed和watch"}],["meta",{"property":"og:description","content":"computed和watch computed：是组件的计算属性。具有缓存性，如果依赖的属性没有变化，就不会重新计算。页面重新渲染时值不变化，计算属性会立即返回之前的计算结果，而不必再次执行函数。（getter/setter默认不会做缓存，vue做了特殊处理，实现了缓存）。 特点： computed用来计算出一个值，这个值在使用的时候不需要加括号，像d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-25T18:37:39.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-25T18:37:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"computed和watch\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-25T18:37:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723794615000,"updatedTime":1724611059000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":2}]},"readingTime":{"minutes":1.43,"words":429},"filePathRelative":"VUE/computed和watch.md","localizedDate":"2024年8月16日","excerpt":"\\n<p><code>computed</code>：是组件的计算属性。具有缓存性，如果依赖的属性没有变化，就不会重新计算。页面重新渲染时值不变化，计算属性会立即返回之前的计算结果，而不必再次执行函数。（<code>getter/setter</code>默认不会做缓存，<code>vue</code>做了特殊处理，实现了缓存）。</p>\\n<p>特点：</p>\\n<ol>\\n<li><code>computed</code>用来计算出一个值，这个值在使用的时候不需要加括号，像<code>data</code>一样直接使用。</li>\\n<li>根据依赖自动缓存，如果依赖不变<code>computed</code>值就不会重新计算。</li>\\n<li>不支持异步，<code>computed</code>内不可以有异步操作。它需要返回值，因此不可以使用异步操作。（在<code>JavaScript</code>中，<code>return</code>语句是同步的）【如果在<code>computed</code>属性中使用异步操作，就会导致计算结果不稳定，而且在异步操作完成前，<code>computed</code>属性无法返回结果（<code>return</code>），这也违背了<code>computed</code>属性的设计初表。因此，<code>vue</code>不支持在<code>computed</code>属性中使用异步操作。】</li>\\n</ol>","autoDesc":true}');export{l as comp,h as data};
