import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as c,f as d}from"./app-C4tUi4gM.js";const t={},a=d('<h1 id="react中的虚拟dom" tabindex="-1"><a class="header-anchor" href="#react中的虚拟dom"><span><code>react</code>中的虚拟<code>DOM</code></span></a></h1><h2 id="虚拟dom是什么" tabindex="-1"><a class="header-anchor" href="#虚拟dom是什么"><span>虚拟<code>DOM</code>是什么</span></a></h2><ul><li><code>React.createElement()</code>函数所返回的就是一个虚拟<code>DOM</code>。</li><li>虚拟<code>DOM</code>就是一个描述真实<code>DOM</code>的纯<code>JS</code>对象。</li></ul><h2 id="虚拟dom的优点" tabindex="-1"><a class="header-anchor" href="#虚拟dom的优点"><span>虚拟<code>DOM</code>的优点</span></a></h2><ul><li>处理了浏览器兼容性问题，避免用户操作真实<code>DOM</code>（又麻烦又容易出错）。</li><li>内容经过了<code>XSS</code>处理，可以预防<code>XSS攻击</code>。</li><li>容易实现跨平台开发<code>Android</code>、<code>IOS</code>、<code>VR</code>应用。</li><li>更新的时候可以实现差异化更新，减少<code>DOM</code>的操作。</li></ul><h2 id="虚拟dom的缺点" tabindex="-1"><a class="header-anchor" href="#虚拟dom的缺点"><span>虚拟<code>DOM</code>的缺点</span></a></h2><ul><li>虚拟<code>DOM</code>需要消耗额外的内存。</li><li>首次渲染其实并不一定会更快。</li></ul><h2 id="虚拟dom渲染成真实dom后-占用内存会释放吗" tabindex="-1"><a class="header-anchor" href="#虚拟dom渲染成真实dom后-占用内存会释放吗"><span>虚拟<code>DOM</code>渲染成真实<code>DOM</code>后，占用内存会释放吗</span></a></h2><p>会的。</p><p>虚拟<code>DOM</code>（<code>VDOM</code>）它是真实<code>DOM</code>的内存表示，一种编程概念，一种模式。它会和真实的<code>DOM</code>同步，比如通过<code>ReactDOM</code>这种库，这个同步的过程叫做调和（<code>reconcilation</code>）。</p><p>虚拟<code>DOM</code>更多是一种模式，不是一种特定的技术。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span><a href="https://segmentfault.com/a/1190000019994425" target="_blank" rel="noopener noreferrer">参考文章</a></span></a></h2>',12),l=[a];function n(r,i){return c(),o("div",null,l)}const m=e(t,[["render",n],["__file","react中的虚拟dom.html.vue"]]),p=JSON.parse('{"path":"/REACT/react%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9FDOM.html","title":"react中的虚拟DOM","lang":"zh-CN","frontmatter":{"description":"react中的虚拟DOM 虚拟DOM是什么 React.createElement()函数所返回的就是一个虚拟DOM。 虚拟DOM就是一个描述真实DOM的纯JS对象。 虚拟DOM的优点 处理了浏览器兼容性问题，避免用户操作真实DOM（又麻烦又容易出错）。 内容经过了XSS处理，可以预防XSS攻击。 容易实现跨平台开发Android、IOS、VR应用。 ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/REACT/react%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9FDOM.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"react中的虚拟DOM"}],["meta",{"property":"og:description","content":"react中的虚拟DOM 虚拟DOM是什么 React.createElement()函数所返回的就是一个虚拟DOM。 虚拟DOM就是一个描述真实DOM的纯JS对象。 虚拟DOM的优点 处理了浏览器兼容性问题，避免用户操作真实DOM（又麻烦又容易出错）。 内容经过了XSS处理，可以预防XSS攻击。 容易实现跨平台开发Android、IOS、VR应用。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"🍑"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"react中的虚拟DOM\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"虚拟DOM是什么","slug":"虚拟dom是什么","link":"#虚拟dom是什么","children":[]},{"level":2,"title":"虚拟DOM的优点","slug":"虚拟dom的优点","link":"#虚拟dom的优点","children":[]},{"level":2,"title":"虚拟DOM的缺点","slug":"虚拟dom的缺点","link":"#虚拟dom的缺点","children":[]},{"level":2,"title":"虚拟DOM渲染成真实DOM后，占用内存会释放吗","slug":"虚拟dom渲染成真实dom后-占用内存会释放吗","link":"#虚拟dom渲染成真实dom后-占用内存会释放吗","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.85,"words":255},"filePathRelative":"REACT/react中的虚拟DOM.md","excerpt":"\\n<h2>虚拟<code>DOM</code>是什么</h2>\\n<ul>\\n<li><code>React.createElement()</code>函数所返回的就是一个虚拟<code>DOM</code>。</li>\\n<li>虚拟<code>DOM</code>就是一个描述真实<code>DOM</code>的纯<code>JS</code>对象。</li>\\n</ul>\\n<h2>虚拟<code>DOM</code>的优点</h2>\\n<ul>\\n<li>处理了浏览器兼容性问题，避免用户操作真实<code>DOM</code>（又麻烦又容易出错）。</li>\\n<li>内容经过了<code>XSS</code>处理，可以预防<code>XSS攻击</code>。</li>\\n<li>容易实现跨平台开发<code>Android</code>、<code>IOS</code>、<code>VR</code>应用。</li>\\n<li>更新的时候可以实现差异化更新，减少<code>DOM</code>的操作。</li>\\n</ul>","autoDesc":true}');export{m as comp,p as data};
