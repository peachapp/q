import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,f as a}from"./app-C4tUi4gM.js";const n={},t=a(`<h1 id="vue3的composition-api" tabindex="-1"><a class="header-anchor" href="#vue3的composition-api"><span><code>vue3</code>的<code>Composition API</code></span></a></h1><h2 id="composition-api是什么" tabindex="-1"><a class="header-anchor" href="#composition-api是什么"><span><code>Composition API</code>是什么</span></a></h2><p><code>Composition API</code>是<code>vue3</code>中新增的一组<code>API</code>，它允许开发者使用函数式编程的方式来组织和复用组件逻辑。与<code>vue2</code>中的<code>Options API</code>（如<code>data</code>、<code>methods</code>、<code>computed</code>等选项）不同，<code>Composition API</code>提供了一种更加灵活和可组合的方式来编写组件逻辑。</p><h2 id="为什么需要composition-api" tabindex="-1"><a class="header-anchor" href="#为什么需要composition-api"><span>为什么需要<code>Composition API</code></span></a></h2><ol><li>更好的代码组织：随着组件功能的增加，<code>Options API</code>可能会导致代码难以维护和理解。<code>Composition API</code>通过将逻辑拆分为多个可复用的函数，提高了代码的可读性和可维护性。</li><li>逻辑复用：在<code>Options API</code>中，复用逻辑通常需要通过<code>mixins</code>或高阶组件实现，但这些方式可能导致命名冲突和关系不清晰（模版中的数据来源不清晰）。<code>Composition API</code>中的函数可以像普通<code>JavaScript</code>函数一样被复用，无需担心命名冲突。</li><li>更好的<code>TypeScript</code>支持：<code>vue3</code>与<code>TypeScript</code>的集成更加紧密，而<code>Composition API</code>的函数式编程风格更适合 <code>TypeScript</code>的类型推断和静态检查。</li></ol><h2 id="composition-api的核心概念" tabindex="-1"><a class="header-anchor" href="#composition-api的核心概念"><span><code>Composition API</code>的核心概念</span></a></h2><ol><li><code>reactive</code>和<code>ref</code>：这两个函数用于创建响应式数据。<code>reactive</code>用于创建响应式对象，而<code>ref</code>用于创建响应式引用。它们都是<code>vue3</code>响应式系统的核心。 <ul><li><code>reactive</code>：返回一个响应式代理对象，该对象在被访问或修改时会触发相应的依赖更新。</li><li><code>ref</code>：返回一个响应式引用对象，其内部值可以通过<code>.value</code>属性访问或修改。</li></ul></li><li><code>computed</code>：用于创建计算属性。计算属性是基于响应式数据派生出的新数据，当依赖的数据变化时，计算属性会自动更新。</li><li><code>watch</code>和<code>watchEffect</code>：用于侦听响应式数据的变化，并在数据变化时执行相应的回调函数。 <ul><li><code>watch</code>：需要显式指定侦听的数据源和回调函数，支持立即执行、深度侦听等选项。</li><li><code>watchEffect</code>：自动侦听回调函数中使用的响应式数据，无需显式指定数据源。当回调函数中使用的数据变化时，<code>watchEffect</code>会自动重新执行回调函数。</li></ul></li><li><code>setup</code>函数：<code>Composition API</code>的入口函数，用于替代<code>vue2</code>中的<code>data</code>、<code>methods</code>、<code>computed</code>等选项。在<code>setup</code>函数中，开发者可以定义和导出组件所需的响应式数据、计算属性、方法等。</li></ol><h2 id="使用composition-api编写组件" tabindex="-1"><a class="header-anchor" href="#使用composition-api编写组件"><span>使用<code>Composition API</code>编写组件</span></a></h2><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" data-title="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;{{ count }}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">click</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">increment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Increment&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 定义响应式引用 count，初始值为 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> increment</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      // 定义方法 increment，用于增加 count 的值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 修改响应式引用的值时，需要使用 .value 属性</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      // 导出 count 和 increment，供模板中使用</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      increment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[t];function l(p,h){return e(),s("div",null,o)}const k=i(n,[["render",l],["__file","vue3的Composition API.html.vue"]]),r=JSON.parse('{"path":"/VUE/vue3%E7%9A%84Composition%20API.html","title":"vue3的Composition API","lang":"zh-CN","frontmatter":{"description":"vue3的Composition API Composition API是什么 Composition API是vue3中新增的一组API，它允许开发者使用函数式编程的方式来组织和复用组件逻辑。与vue2中的Options API（如data、methods、computed等选项）不同，Composition API提供了一种更加灵活和可组合的方式来...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/VUE/vue3%E7%9A%84Composition%20API.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"vue3的Composition API"}],["meta",{"property":"og:description","content":"vue3的Composition API Composition API是什么 Composition API是vue3中新增的一组API，它允许开发者使用函数式编程的方式来组织和复用组件逻辑。与vue2中的Options API（如data、methods、computed等选项）不同，Composition API提供了一种更加灵活和可组合的方式来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue3的Composition API\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Composition API是什么","slug":"composition-api是什么","link":"#composition-api是什么","children":[]},{"level":2,"title":"为什么需要Composition API","slug":"为什么需要composition-api","link":"#为什么需要composition-api","children":[]},{"level":2,"title":"Composition API的核心概念","slug":"composition-api的核心概念","link":"#composition-api的核心概念","children":[]},{"level":2,"title":"使用Composition API编写组件","slug":"使用composition-api编写组件","link":"#使用composition-api编写组件","children":[]}],"git":{"createdTime":1723794615000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":2.4,"words":720},"filePathRelative":"VUE/vue3的Composition API.md","localizedDate":"2024年8月16日","excerpt":"\\n<h2><code>Composition API</code>是什么</h2>\\n<p><code>Composition API</code>是<code>vue3</code>中新增的一组<code>API</code>，它允许开发者使用函数式编程的方式来组织和复用组件逻辑。与<code>vue2</code>中的<code>Options API</code>（如<code>data</code>、<code>methods</code>、<code>computed</code>等选项）不同，<code>Composition API</code>提供了一种更加灵活和可组合的方式来编写组件逻辑。</p>","autoDesc":true}');export{k as comp,r as data};
