import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as t,f as c}from"./app-C4tUi4gM.js";const n={},i=c('<h1 id="函数组件和类组件" tabindex="-1"><a class="header-anchor" href="#函数组件和类组件"><span>函数组件和类组件</span></a></h1><h2 id="函数组件和类组件的相同点和不同点" tabindex="-1"><a class="header-anchor" href="#函数组件和类组件的相同点和不同点"><span>函数组件和类组件的相同点和不同点</span></a></h2><p>组件：组件允许将<code>UI</code>拆分为独立可复用的代码片段，并对每个片段进行独立构思。</p><p>相同点：</p><ul><li>它们都可以接收属性并且返回<code>react</code>元素。</li></ul><p>不同点：</p><ul><li>编程思想不同：类组件需要创建实例，是基于面向对象的方式编程。而函数组件不需要创建实例，接收输入，返回输出，基于函数式编程的思想。</li><li>内存占用：类组件需要创建并保存实例，会占用一定的内存。函数组件不需要创建实例，可以节约内存占用。</li><li>捕获特性：函数组件具有值捕获特性。</li><li>可测试性：函数组件更方便编写单元测试。</li><li>状态：类组件有自己的实例，可以定义状态，而且可以修改状态更新组件。函数组件以前没有状态，现在可以使用<code>useState</code>使用状态。</li><li>生命周期：类组件有自己完整的生命周期，可以在生命周期内编写逻辑，函数组件以前没有生命周期，现在可以使用<code>useEffect</code>实现类似生命周期的功能。</li><li>逻辑复用：类组件可以通过继承实现逻辑的复用，但官方推荐组件优于继承，函数组件可以通过自定义<code>Hook</code>实现逻辑的复用。</li><li>跳过更新：类组件可以通过<code>shouldComponentUpdate</code>和<code>PureComponent</code>来跳过更新，而函数组件可以使用<code>React.memo</code>来跳过更新。</li><li>发展前景：未来函数组件将会成为主流，因为它可以更好的屏蔽<code>this</code>问题、规范和复用逻辑、更好的适合时间切片和并发渲染。</li></ul><h2 id="有状态组件和无状态组件" tabindex="-1"><a class="header-anchor" href="#有状态组件和无状态组件"><span>有状态组件和无状态组件</span></a></h2><p>有状态组件就是一个类，无状态组件是一个函数（react16.8 新增了<code>hooks</code>，函数组件也可以管理状态）。</p><ul><li>是否拥有<code>state</code>：有状态组件可以使用状态<code>state</code>，无状态组件不能使用状态<code>state</code>。只有继承<code>component</code>这个组件它才能拥有<code>state</code>进行一些数据的存储和管理，无状态组件仍然可以拥有<code>props</code>。</li><li>生命周期：有状态组件拥有生命周期函数，无状态组件没有生命周期函数。</li><li>有状态组件能使用<code>this</code>，无状态组件不能使用<code>this</code>。</li></ul><h2 id="react源码如何区分函数组件-functioncomponent-和类组件-classcomponent" tabindex="-1"><a class="header-anchor" href="#react源码如何区分函数组件-functioncomponent-和类组件-classcomponent"><span><code>react</code>源码如何区分函数组件（<code>functionComponent</code>）和类组件 (<code>classComponent</code>)</span></a></h2><h2 id="为什么函数组件不能用this" tabindex="-1"><a class="header-anchor" href="#为什么函数组件不能用this"><span>为什么函数组件不能用<code>this</code></span></a></h2><p><code>this</code>指的是组件的实例，函数组件没有实例，所以不能用<code>this</code>。</p>',13),l=[i];function a(d,s){return t(),o("div",null,l)}const h=e(n,[["render",a],["__file","函数组件和类组件.html.vue"]]),m=JSON.parse('{"path":"/REACT/%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E5%92%8C%E7%B1%BB%E7%BB%84%E4%BB%B6.html","title":"函数组件和类组件","lang":"zh-CN","frontmatter":{"description":"函数组件和类组件 函数组件和类组件的相同点和不同点 组件：组件允许将UI拆分为独立可复用的代码片段，并对每个片段进行独立构思。 相同点： 它们都可以接收属性并且返回react元素。 不同点： 编程思想不同：类组件需要创建实例，是基于面向对象的方式编程。而函数组件不需要创建实例，接收输入，返回输出，基于函数式编程的思想。 内存占用：类组件需要创建并保存实...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/REACT/%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E5%92%8C%E7%B1%BB%E7%BB%84%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"函数组件和类组件"}],["meta",{"property":"og:description","content":"函数组件和类组件 函数组件和类组件的相同点和不同点 组件：组件允许将UI拆分为独立可复用的代码片段，并对每个片段进行独立构思。 相同点： 它们都可以接收属性并且返回react元素。 不同点： 编程思想不同：类组件需要创建实例，是基于面向对象的方式编程。而函数组件不需要创建实例，接收输入，返回输出，基于函数式编程的思想。 内存占用：类组件需要创建并保存实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"🍑"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数组件和类组件\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"函数组件和类组件的相同点和不同点","slug":"函数组件和类组件的相同点和不同点","link":"#函数组件和类组件的相同点和不同点","children":[]},{"level":2,"title":"有状态组件和无状态组件","slug":"有状态组件和无状态组件","link":"#有状态组件和无状态组件","children":[]},{"level":2,"title":"react源码如何区分函数组件（functionComponent）和类组件 (classComponent)","slug":"react源码如何区分函数组件-functioncomponent-和类组件-classcomponent","link":"#react源码如何区分函数组件-functioncomponent-和类组件-classcomponent","children":[]},{"level":2,"title":"为什么函数组件不能用this","slug":"为什么函数组件不能用this","link":"#为什么函数组件不能用this","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.23,"words":669},"filePathRelative":"REACT/函数组件和类组件.md","excerpt":"\\n<h2>函数组件和类组件的相同点和不同点</h2>\\n<p>组件：组件允许将<code>UI</code>拆分为独立可复用的代码片段，并对每个片段进行独立构思。</p>\\n<p>相同点：</p>\\n<ul>\\n<li>它们都可以接收属性并且返回<code>react</code>元素。</li>\\n</ul>\\n<p>不同点：</p>\\n<ul>\\n<li>编程思想不同：类组件需要创建实例，是基于面向对象的方式编程。而函数组件不需要创建实例，接收输入，返回输出，基于函数式编程的思想。</li>\\n<li>内存占用：类组件需要创建并保存实例，会占用一定的内存。函数组件不需要创建实例，可以节约内存占用。</li>\\n<li>捕获特性：函数组件具有值捕获特性。</li>\\n<li>可测试性：函数组件更方便编写单元测试。</li>\\n<li>状态：类组件有自己的实例，可以定义状态，而且可以修改状态更新组件。函数组件以前没有状态，现在可以使用<code>useState</code>使用状态。</li>\\n<li>生命周期：类组件有自己完整的生命周期，可以在生命周期内编写逻辑，函数组件以前没有生命周期，现在可以使用<code>useEffect</code>实现类似生命周期的功能。</li>\\n<li>逻辑复用：类组件可以通过继承实现逻辑的复用，但官方推荐组件优于继承，函数组件可以通过自定义<code>Hook</code>实现逻辑的复用。</li>\\n<li>跳过更新：类组件可以通过<code>shouldComponentUpdate</code>和<code>PureComponent</code>来跳过更新，而函数组件可以使用<code>React.memo</code>来跳过更新。</li>\\n<li>发展前景：未来函数组件将会成为主流，因为它可以更好的屏蔽<code>this</code>问题、规范和复用逻辑、更好的适合时间切片和并发渲染。</li>\\n</ul>","autoDesc":true}');export{h as comp,m as data};
