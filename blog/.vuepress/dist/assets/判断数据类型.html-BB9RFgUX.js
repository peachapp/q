import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o,f as i}from"./app-8HN3oAmX.js";const s={},c=i(`<h1 id="判断数据类型" tabindex="-1"><a class="header-anchor" href="#判断数据类型"><span>判断数据类型</span></a></h1><p><strong>1. <code>typeof</code></strong></p><p>使用<code>typeof</code>可以判断基本数据类型，<code>null</code>除外。在使用<code>typeof</code>判断引用数据类型时除了判断<code>function</code>返回 <code>function</code>类型，其他引用数据类型返回的都是<code>object</code>。并且返回的数据类型是字符串形式的小写。</p><p>使用方法：<code>typeof a</code></p><p>返回格式：<code>string</code></p><p><strong>2. <code>instanceof</code></strong></p><p>使用<code>instanceof</code>可以判断已知的引用数据类型，不能判断基本数据类型。<code>instanceof</code>可以判断一个值是否属于某种类型，<code>instanceof</code>也可以判断在继承时一个实例是否属于它的父类型。</p><p>使用方法：<code>[1,2,3,4] instanceof Array</code></p><p>原理：获取目标类型的显式原型<code>prototype</code>以及需要判断的实例的隐式原型<code>__proto</code>，将实例按原型链一级一级判断，直到<code>__proto</code>为<code>null</code>，代表已经到<code>Object</code>顶层对象，此时返回<code>false</code>；若中途两者相等，则返回<code>true</code>。</p><blockquote><p><code>instanceof</code>运算符用于测试构造函数的<code>prototype</code>属性是否出现在对象原型链中的任何位置。</p></blockquote><p><code>instanceof</code>只有同一个全局<code>window</code>，才会返回<code>true</code>。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // window.frames[0].arr iframe内部的数组</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">frames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">arr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> instanceof</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. <code>constructor</code></strong></p><p><code>constructor</code>是<code>prototype</code>对象上的属性，指向构造函数。<code>constructor</code>除了<code>null</code>和<code>undefined</code>无法判断，其他的数据类型都可以判断，但是对于继承类型的数据有可能会出错，因为<code>Object</code>被覆盖掉了，检测结果就不对了。</p><p>使用方法：<code>([1,2,3,4]).constructor</code></p><p>返回格式：<code>ƒ Array() { [native code] }</code></p><p><strong>4. <code>Object.prototype.toString.call()</code></strong></p><p><code>Object.prototype.toString.call()</code>通用于所有的数据类型，返回的是构造函数的类型。</p><p>使用方法：<code>Object.prototype.toString.call([1,2,3,4])</code></p><p>返回格式为：<code>[object Array]</code></p><p><strong>5. <code>Array.isArray</code>可以判断是否是一个数组</strong></p><p>使用方法：<code>Array.isArray(arr)</code></p><p>返回格式为：<code>true</code></p>`,23),n=[c];function a(d,p){return o(),t("div",null,n)}const h=e(s,[["render",a],["__file","判断数据类型.html.vue"]]),k=JSON.parse('{"path":"/JAVASCRIPT/%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"判断数据类型","lang":"zh-CN","frontmatter":{"description":"判断数据类型 1. typeof 使用typeof可以判断基本数据类型，null除外。在使用typeof判断引用数据类型时除了判断function返回 function类型，其他引用数据类型返回的都是object。并且返回的数据类型是字符串形式的小写。 使用方法：typeof a 返回格式：string 2. instanceof 使用instance...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/JAVASCRIPT/%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"判断数据类型"}],["meta",{"property":"og:description","content":"判断数据类型 1. typeof 使用typeof可以判断基本数据类型，null除外。在使用typeof判断引用数据类型时除了判断function返回 function类型，其他引用数据类型返回的都是object。并且返回的数据类型是字符串形式的小写。 使用方法：typeof a 返回格式：string 2. instanceof 使用instance..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"判断数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723009479000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":1.54,"words":461},"filePathRelative":"JAVASCRIPT/判断数据类型.md","localizedDate":"2024年8月7日","excerpt":"\\n<p><strong>1. <code>typeof</code></strong></p>\\n<p>使用<code>typeof</code>可以判断基本数据类型，<code>null</code>除外。在使用<code>typeof</code>判断引用数据类型时除了判断<code>function</code>返回 <code>function</code>类型，其他引用数据类型返回的都是<code>object</code>。并且返回的数据类型是字符串形式的小写。</p>\\n<p>使用方法：<code>typeof a</code></p>\\n<p>返回格式：<code>string</code></p>","autoDesc":true}');export{h as comp,k as data};
