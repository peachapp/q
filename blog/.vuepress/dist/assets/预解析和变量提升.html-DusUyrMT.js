import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o,f as a}from"./app-C4tUi4gM.js";const c={},r=a('<h1 id="预解析和变量提升" tabindex="-1"><a class="header-anchor" href="#预解析和变量提升"><span>预解析和变量提升</span></a></h1><p><code>JavaScript</code>代码的执行分为两个阶段。第一个阶段在当前词法环境中注册所有的变量和函数声明，简单说就是，解析，解析完成之后，第二个阶段的<code>JavaScript</code>执行就开始了！</p><p>当<code>JavaScript</code>编译所有代码时，所有使用<code>var</code>的变量声明都被提升到它们的函数或局部作用域的顶部（如果在函数内部声明的话），或者提升到它们的全局作用域的顶部（如果在函数外部声明的话），而不管实际的声明是在哪里进行的。这就是我们所说的“提升”。这种“提升”实际上并不发生在代码中，而只是一种比喻，与<code>JavaScript</code>编译器如何读取代码有关。当我们想到“提升”的时候，我们可以想象任何被提升的东西都会被移动到作用域顶部，但是实际上的代码并不会被修改。</p><p>预解析分为变量预解析（变量提升）和函数预解析（函数提升）。</p><p><code>js</code>引擎在运行一份代码的时候，会按照下面的步骤进行工作：</p><ol><li>把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值，这就是变量提升。</li><li>把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用，这就是函数提升。</li><li>先提升<code>function</code>，再提升<code>var</code>，所以函数声明将位于所有变量声明之上。</li></ol>',6),i=[r];function p(d,n){return o(),t("div",null,i)}const l=e(c,[["render",p],["__file","预解析和变量提升.html.vue"]]),h=JSON.parse('{"path":"/JAVASCRIPT/%E9%A2%84%E8%A7%A3%E6%9E%90%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87.html","title":"预解析和变量提升","lang":"zh-CN","frontmatter":{"description":"预解析和变量提升 JavaScript代码的执行分为两个阶段。第一个阶段在当前词法环境中注册所有的变量和函数声明，简单说就是，解析，解析完成之后，第二个阶段的JavaScript执行就开始了！ 当JavaScript编译所有代码时，所有使用var的变量声明都被提升到它们的函数或局部作用域的顶部（如果在函数内部声明的话），或者提升到它们的全局作用域的顶部...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/JAVASCRIPT/%E9%A2%84%E8%A7%A3%E6%9E%90%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"预解析和变量提升"}],["meta",{"property":"og:description","content":"预解析和变量提升 JavaScript代码的执行分为两个阶段。第一个阶段在当前词法环境中注册所有的变量和函数声明，简单说就是，解析，解析完成之后，第二个阶段的JavaScript执行就开始了！ 当JavaScript编译所有代码时，所有使用var的变量声明都被提升到它们的函数或局部作用域的顶部（如果在函数内部声明的话），或者提升到它们的全局作用域的顶部..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"预解析和变量提升\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723009479000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":1.36,"words":407},"filePathRelative":"JAVASCRIPT/预解析和变量提升.md","localizedDate":"2024年8月7日","excerpt":"\\n<p><code>JavaScript</code>代码的执行分为两个阶段。第一个阶段在当前词法环境中注册所有的变量和函数声明，简单说就是，解析，解析完成之后，第二个阶段的<code>JavaScript</code>执行就开始了！</p>\\n<p>当<code>JavaScript</code>编译所有代码时，所有使用<code>var</code>的变量声明都被提升到它们的函数或局部作用域的顶部（如果在函数内部声明的话），或者提升到它们的全局作用域的顶部（如果在函数外部声明的话），而不管实际的声明是在哪里进行的。这就是我们所说的“提升”。这种“提升”实际上并不发生在代码中，而只是一种比喻，与<code>JavaScript</code>编译器如何读取代码有关。当我们想到“提升”的时候，我们可以想象任何被提升的东西都会被移动到作用域顶部，但是实际上的代码并不会被修改。</p>","autoDesc":true}');export{l as comp,h as data};
