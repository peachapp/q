import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,f as t}from"./app-8HN3oAmX.js";const a={},n=t(`<h1 id="ref属性" tabindex="-1"><a class="header-anchor" href="#ref属性"><span><code>ref</code>属性</span></a></h1><p><code>ref</code>被用来给元素或子组件注册引用信息。引用信息将会被注册在父组件的<code>$refs</code>对象上。如果在<code>DOM元素</code>上使用，引用指向的就是那个<code>DOM元素</code>；如果在子组件上使用，引用指向的就是那个组件实例：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;!-- vm.$refs.p 会是 DOM 节点 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;p&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;hello&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;!-- vm.$refs.child 会是子组件实例 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">child-component</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;child&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">child-component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;!-- 当动态绑定时，可以将 ref 定义为回调函数，显式地传递元素或组件实例 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">child-component</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;(el) =&gt; child = el&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">child-component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于<code>ref</code>注册时机的重要说明：</p><p>因为<code>ref</code>本身是作为渲染函数的结果而创建的，在初始渲染时不能访问它们（初始渲染时它们还不存在！）。<code>$refs</code>是非响应式的，因此不应该试图用它在模板中做数据绑定。</p>`,5),l=[n];function h(p,r){return e(),s("div",null,l)}const c=i(a,[["render",h],["__file","ref属性.html.vue"]]),o=JSON.parse('{"path":"/VUE/ref%E5%B1%9E%E6%80%A7.html","title":"ref属性","lang":"zh-CN","frontmatter":{"description":"ref属性 ref被用来给元素或子组件注册引用信息。引用信息将会被注册在父组件的$refs对象上。如果在DOM元素上使用，引用指向的就是那个DOM元素；如果在子组件上使用，引用指向的就是那个组件实例： 关于ref注册时机的重要说明： 因为ref本身是作为渲染函数的结果而创建的，在初始渲染时不能访问它们（初始渲染时它们还不存在！）。$refs是非响应式的...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/VUE/ref%E5%B1%9E%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"ref属性"}],["meta",{"property":"og:description","content":"ref属性 ref被用来给元素或子组件注册引用信息。引用信息将会被注册在父组件的$refs对象上。如果在DOM元素上使用，引用指向的就是那个DOM元素；如果在子组件上使用，引用指向的就是那个组件实例： 关于ref注册时机的重要说明： 因为ref本身是作为渲染函数的结果而创建的，在初始渲染时不能访问它们（初始渲染时它们还不存在！）。$refs是非响应式的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ref属性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723794615000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":0.75,"words":225},"filePathRelative":"VUE/ref属性.md","localizedDate":"2024年8月16日","excerpt":"\\n<p><code>ref</code>被用来给元素或子组件注册引用信息。引用信息将会被注册在父组件的<code>$refs</code>对象上。如果在<code>DOM元素</code>上使用，引用指向的就是那个<code>DOM元素</code>；如果在子组件上使用，引用指向的就是那个组件实例：</p>\\n<div class=\\"language-html line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"html\\" data-title=\\"html\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\">&lt;!-- vm.$refs.p 会是 DOM 节点 --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">p</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> ref</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"p\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;hello&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">p</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\">&lt;!-- vm.$refs.child 会是子组件实例 --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">child-component</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> ref</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"child\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">child-component</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic\\">&lt;!-- 当动态绑定时，可以将 ref 定义为回调函数，显式地传递元素或组件实例 --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">child-component</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> :ref</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"(el) =&gt; child = el\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;&lt;/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">child-component</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,o as data};
