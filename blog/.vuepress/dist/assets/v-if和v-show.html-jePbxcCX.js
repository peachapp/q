import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as c,f as d}from"./app-8HN3oAmX.js";const t={},i=d('<h1 id="v-if和v-show" tabindex="-1"><a class="header-anchor" href="#v-if和v-show"><span><code>v-if</code>和<code>v-show</code></span></a></h1><p>共同点：</p><p>在<code>vue</code>中<code>v-show</code>与<code>v-if</code>的作用效果是相同的（不含<code>v-else</code>），都能控制元素在页面是否显示。</p><ol><li>当表达式结果为<code>true</code>时，都会在页面显示。</li><li>当表达式结果为<code>false</code>时，都不会在页面显示。</li></ol><p>区别：</p><ol><li>控制手段不同：<br><code>v-if</code>显示隐藏是将<code>dom元素</code>整个添加或删除。<br><code>v-show</code>显示隐藏是为该元素设置<code>css</code>样式<code>display</code>属性（<code>block</code>，<code>none</code>），<code>dom元素</code>依旧还在。</li><li>编译过程不同：<br><code>v-if</code>切换有一个局部编译、卸载的过程，切换过程中会重建、销毁内部的事件监听和子组件。<br><code>v-show</code>只是简单的基于<code>css</code>切换样式。</li><li>编译条件不同：<br><code>v-if</code>是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</li><li>触发组件的生命周期不同：<br><code>v-if</code>的表达式值由<code>false</code>变为<code>true</code>的时候，触发组件的<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>生命周期，由<code>true</code>变为<code>false</code>的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>生命周期。 <br><code>v-show</code>切换的时候不会触发组件的生命周期。</li><li>性能消耗不同：<br><code>v-if</code>有更高的切换消耗。<br><code>v-show</code>有更高的初始渲染消耗。</li></ol><p>使用场景：</p><ul><li>如果需要非常频繁地切换，则使用<code>v-show</code>较好。</li><li>如果在运行时条件很少改变，则使用<code>v-if</code>较好。</li></ul>',8),r=[i];function s(l,n){return c(),o("div",null,r)}const p=e(t,[["render",s],["__file","v-if和v-show.html.vue"]]),h=JSON.parse('{"path":"/VUE/v-if%E5%92%8Cv-show.html","title":"v-if和v-show","lang":"zh-CN","frontmatter":{"description":"v-if和v-show 共同点： 在vue中v-show与v-if的作用效果是相同的（不含v-else），都能控制元素在页面是否显示。 当表达式结果为true时，都会在页面显示。 当表达式结果为false时，都不会在页面显示。 区别： 控制手段不同： v-if显示隐藏是将dom元素整个添加或删除。 v-show显示隐藏是为该元素设置css样式displ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/VUE/v-if%E5%92%8Cv-show.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"v-if和v-show"}],["meta",{"property":"og:description","content":"v-if和v-show 共同点： 在vue中v-show与v-if的作用效果是相同的（不含v-else），都能控制元素在页面是否显示。 当表达式结果为true时，都会在页面显示。 当表达式结果为false时，都不会在页面显示。 区别： 控制手段不同： v-if显示隐藏是将dom元素整个添加或删除。 v-show显示隐藏是为该元素设置css样式displ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"v-if和v-show\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723794615000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":1.29,"words":387},"filePathRelative":"VUE/v-if和v-show.md","localizedDate":"2024年8月16日","excerpt":"\\n<p>共同点：</p>\\n<p>在<code>vue</code>中<code>v-show</code>与<code>v-if</code>的作用效果是相同的（不含<code>v-else</code>），都能控制元素在页面是否显示。</p>\\n<ol>\\n<li>当表达式结果为<code>true</code>时，都会在页面显示。</li>\\n<li>当表达式结果为<code>false</code>时，都不会在页面显示。</li>\\n</ol>\\n<p>区别：</p>\\n<ol>\\n<li>控制手段不同：<br>\\n<code>v-if</code>显示隐藏是将<code>dom元素</code>整个添加或删除。<br>\\n<code>v-show</code>显示隐藏是为该元素设置<code>css</code>样式<code>display</code>属性（<code>block</code>，<code>none</code>），<code>dom元素</code>依旧还在。</li>\\n<li>编译过程不同：<br>\\n<code>v-if</code>切换有一个局部编译、卸载的过程，切换过程中会重建、销毁内部的事件监听和子组件。<br>\\n<code>v-show</code>只是简单的基于<code>css</code>切换样式。</li>\\n<li>编译条件不同：<br>\\n<code>v-if</code>是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</li>\\n<li>触发组件的生命周期不同：<br>\\n<code>v-if</code>的表达式值由<code>false</code>变为<code>true</code>的时候，触发组件的<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>生命周期，由<code>true</code>变为<code>false</code>的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>生命周期。 <br>\\n<code>v-show</code>切换的时候不会触发组件的生命周期。</li>\\n<li>性能消耗不同：<br>\\n<code>v-if</code>有更高的切换消耗。<br>\\n<code>v-show</code>有更高的初始渲染消耗。</li>\\n</ol>","autoDesc":true}');export{p as comp,h as data};
