import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o,f as d}from"./app-C4tUi4gM.js";const c={},t=d(`<h1 id="经常遇到的浏览器的兼容性问题及解决方案" tabindex="-1"><a class="header-anchor" href="#经常遇到的浏览器的兼容性问题及解决方案"><span>经常遇到的浏览器的兼容性问题及解决方案</span></a></h1><ol><li><code>png24</code>位的图片在<code>IE6</code>浏览器上出现背景。解决方案：做成<code>png8</code>，也可以引用一段脚本处理。</li><li>浏览器默认的<code>margin</code>和<code>padding</code>不同。解决方案：加一个全局的<code>*{margin:0;padding:0;}</code>来统一。</li><li><code>IE6</code>双边距问题：在<code>IE6</code>下，如果对元素设置了浮动，同时又设置了<code>margin-left</code>或<code>margin-right</code>，<code>margin</code>值会加倍。<br><code>#box{float: left; width: 10px; margin: 0 0 0 10px;}</code>这种情况之下 <code>IE</code>会产生<code>20px</code>的距离。 <br> 解决方案：在<code>float</code>的标签样式控制中加入<code>*display: inline;</code>将其转化为行内属性。(*这个符号只有<code>IE6</code>会识别）</li><li>渐进识别的方式，从总体中逐渐排除局部。<br> 首先，巧妙的使用&quot;<code>\\9</code>&quot;这一标记，将<code>IE</code>浏览器从所有情况中分离出来。接着，再次使用&quot;<code>+</code>&quot;将<code>IE8</code>和<code>IE7</code>、<code>IE6</code>分离开来，这样<code>IE8</code>已经独立识别。</li></ol><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.bb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  background-color: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">#</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">f1ee18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*所有识别*/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .background-color: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">#</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">00deff</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*IE6、7、8 识别*/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  +background-color: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">#</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">a200ff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*IE6、7 识别*/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  _background-color: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">#</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">1e0bd1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*IE6 识别*/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><p><code>IE</code>下，可以使用获取常规属性的方法来获取自定义属性，也可以使用<code>getAttribute()</code>获取自定义属性；<code>Firefox</code>下，只能使用<code>getAttribute()</code>获取自定义属性。 <br> 解决方案：统一通过<code>getAttribute()</code>获取自定义属性。</p></li><li><p><code>IE</code>下，<code>event</code>对象有<code>x</code>、<code>y</code>属性，但是没有<code>pageX</code>、<code>pageY</code>属性；<code>Firefox</code>下，<code>event</code>对象有<code>pageX</code>、<code>pageY</code>属性，但是没有<code>x</code>、<code>y</code>属性。<br> 解决方案：（条件注释）缺点是在<code>IE</code>浏览器下可能会增加额外的<code>HTTP</code>请求数。</p></li><li><p><code>chrome</code>中文界面下默认会将小于<code>12px</code>的文本强制按照<code>12px</code>显示。解决方案：</p><ul><li>可通过加入<code>CSS</code>属性<code>-webkit-text-size-adjust: none;</code>解决。但是，在<code>chrome</code>更新到<code>27</code>版本之后就不可以用了。</li><li>还可以使用<code>CSS3</code>的<code>transform</code>缩放属性<code>-webkit-transform: scale(0.5);</code>注意：<code>-webkit-transform: scale(0.75);</code>收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用<code>display: block/inline-block/...;</code>。</li><li>还可以使用图片：内容固定不变情况下，将小于<code>12px</code>文字内容切出做图片，这样不影响兼容也不影响美观。</li></ul></li><li><p>超链接访问过后<code>hover</code>样式就不出现了，被点击访问过的超链接样式不再具有<code>hover</code>和<code>active</code>了。 <br> 解决方案：改变<code>CSS</code>属性的排列顺序<code>L-V-H-A</code>（或者<code>V-L-H-A</code>）。</p></li><li><p>怪异模式问题：漏写<code>DTD</code>声明，<code>Firefox</code>仍然会按照标准模式来解析网页，但在<code>IE</code>中会触发怪异模式。为避免怪异模式带来不必要的麻烦，最好养成书写<code>DTD</code>声明的好习惯。</p></li></ol>`,4),s=[t];function a(n,l){return o(),i("div",null,s)}const h=e(c,[["render",a],["__file","经常遇到的浏览器兼容性问题.html.vue"]]),k=JSON.parse('{"path":"/CSS/%E7%BB%8F%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98.html","title":"经常遇到的浏览器的兼容性问题及解决方案","lang":"zh-CN","frontmatter":{"description":"经常遇到的浏览器的兼容性问题及解决方案 png24位的图片在IE6浏览器上出现背景。解决方案：做成png8，也可以引用一段脚本处理。 浏览器默认的margin和padding不同。解决方案：加一个全局的*{margin:0;padding:0;}来统一。 IE6双边距问题：在IE6下，如果对元素设置了浮动，同时又设置了margin-left或margi...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/CSS/%E7%BB%8F%E5%B8%B8%E9%81%87%E5%88%B0%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"经常遇到的浏览器的兼容性问题及解决方案"}],["meta",{"property":"og:description","content":"经常遇到的浏览器的兼容性问题及解决方案 png24位的图片在IE6浏览器上出现背景。解决方案：做成png8，也可以引用一段脚本处理。 浏览器默认的margin和padding不同。解决方案：加一个全局的*{margin:0;padding:0;}来统一。 IE6双边距问题：在IE6下，如果对元素设置了浮动，同时又设置了margin-left或margi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"经常遇到的浏览器的兼容性问题及解决方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723630143000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":2.38,"words":713},"filePathRelative":"CSS/经常遇到的浏览器兼容性问题.md","localizedDate":"2024年8月14日","excerpt":"\\n<ol>\\n<li><code>png24</code>位的图片在<code>IE6</code>浏览器上出现背景。解决方案：做成<code>png8</code>，也可以引用一段脚本处理。</li>\\n<li>浏览器默认的<code>margin</code>和<code>padding</code>不同。解决方案：加一个全局的<code>*{margin:0;padding:0;}</code>来统一。</li>\\n<li><code>IE6</code>双边距问题：在<code>IE6</code>下，如果对元素设置了浮动，同时又设置了<code>margin-left</code>或<code>margin-right</code>，<code>margin</code>值会加倍。<br>\\n<code>#box{float: left; width: 10px; margin: 0 0 0 10px;}</code>这种情况之下 <code>IE</code>会产生<code>20px</code>的距离。 <br>\\n解决方案：在<code>float</code>的标签样式控制中加入<code>*display: inline;</code>将其转化为行内属性。(*这个符号只有<code>IE6</code>会识别）</li>\\n<li>渐进识别的方式，从总体中逐渐排除局部。<br>\\n首先，巧妙的使用\\"<code>\\\\9</code>\\"这一标记，将<code>IE</code>浏览器从所有情况中分离出来。接着，再次使用\\"<code>+</code>\\"将<code>IE8</code>和<code>IE7</code>、<code>IE6</code>分离开来，这样<code>IE8</code>已经独立识别。</li>\\n</ol>","autoDesc":true}');export{h as comp,k as data};
