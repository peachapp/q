import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as e,f as a}from"./app-8HN3oAmX.js";const t={},n=a(`<h1 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex"><span><code>vuex</code></span></a></h1><h2 id="vuex简介" tabindex="-1"><a class="header-anchor" href="#vuex简介"><span><code>vuex</code>简介</span></a></h2><p><code>vuex</code>是单向数据流还是双向数据流？</p><p><code>vuex</code>是单向数据流，必须通过<code>vuex</code>提供的<code>Mutations</code>或者<code>Actions</code>修改，在组件中直接修改会报错。</p><p><code>vuex</code>是一个专为<code>vue.js</code>应用程序开发的状态管理工具。它采用集中式存储，管理应用所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p><code>vuex</code>应用的核心就是<code>store</code>（仓库）。<code>store</code>基本上就是一个容器，它包含着应用中大部分的状态 (<code>State</code>)。</p><p><code>vuex</code>中的状态和单纯的全局对象区别：</p><ol><li><code>vuex</code>的状态存储是响应式的。当<code>vue</code>组件从<code>store</code>中读取状态的时候，若<code>store</code>中的状态发生变化，那么相应的组件也会得到高效更新。</li><li>不能直接改变<code>store</code>中的状态。改变<code>store</code>中的状态的唯一途径就是显式地提交 (<code>commit</code>) <code>mutation</code>。这样可以方便地跟踪每一个状态的变化，从而更好地了解我们的应用。</li></ol><p>一句话介绍：</p><p><code>vuex</code>实现了一个单向数据流，在全局拥有一个<code>State</code>存放数据，当组件要更改<code>State</code>中的数据时，必须通过<code>Mutation</code>进行修改，<code>Mutation</code>同时提供了订阅者模式供外部插件调用获取<code>State</code>数据的更新。而当所有异步操作（常见于调用后端接口异步获取更新数据）或批量的同步操作需要走<code>Action</code>，但<code>Action</code>也无法直接修改<code>State</code>，还是需要提交<code>Mutation</code>来修改<code>State</code>的数据。最后，根据<code>State</code>的变化，渲染到视图上。</p><h2 id="vuex的核心概念或者属性" tabindex="-1"><a class="header-anchor" href="#vuex的核心概念或者属性"><span><code>vuex</code>的核心概念或者属性</span></a></h2><p><code>State</code>、<code>Getters</code>、<code>Mutations</code>、<code>Actions</code>、<code>Modules</code>。</p><h2 id="state-类似于组件中的data" tabindex="-1"><a class="header-anchor" href="#state-类似于组件中的data"><span><code>State</code>：类似于组件中的<code>data</code></span></a></h2><p><code>vuex</code>使用单一状态树，<code>State</code>是<code>vuex</code>的基本数据，用来存储变量。</p><p>在组件中获得<code>vuex state</code>：<code>store.state.count</code>，子组件能通过<code>this.$store</code>访问到。</p><p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用<code>mapState</code>辅助函数帮助我们生成计算属性，让你少按几次键：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mapState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuex&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  computed</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mapState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 箭头函数可使代码更简练</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 传字符串参数 &#39;count&#39; 等同于 \`state =&gt; state.count\`</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    countAlias</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;count&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 为了能够使用 \`this\` 获取局部状态，必须使用常规函数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    countPlusLocalState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">localCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当映射的计算属性的名称与<code>state</code>的子节点名称相同时，我们也可以给<code>mapState</code>传一个字符串数组。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">computed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 映射 this.count 为 store.state.count</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;count&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getters-类似于组件中的computed" tabindex="-1"><a class="header-anchor" href="#getters-类似于组件中的computed"><span><code>Getters</code>：类似于组件中的<code>computed</code></span></a></h2><p><code>Getters</code>从基本数据 (<code>State</code>) 派生的数据，相当于<code>State</code>的计算属性。</p><p>在组件中获得<code>vuex getters</code>：<code>store.getters</code>，子组件能通过<code>this.$store</code>访问到。</p><p><code>mapGetters</code>辅助函数仅仅是将<code>store</code>中的<code>getter</code>映射到局部计算属性：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mapGetters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuex&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  computed</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 使用对象展开运算符将 getter 混入 computed 对象中</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">    ...</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapGetters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;doneTodosCount&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;anotherGetter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想将一个<code>getter</code>属性另取一个名字，使用对象形式：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapGetters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // 把 \`this.doneCount\` 映射为 \`this.$store.getters.doneTodosCount\`</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  doneCount</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;doneTodosCount&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mutations-类似于组件中的methods" tabindex="-1"><a class="header-anchor" href="#mutations-类似于组件中的methods"><span><code>Mutations</code>：类似于组件中的<code>methods</code></span></a></h2><p><code>Mutations</code>是提交更新数据的方法，必须是同步的（如果异步操作需要使用<code>action</code>）。每个<code>Mutation</code>都有一个字符串的事件类型 (<code>type</code>) 和一个回调函数 (<code>handler</code>)。回调函数就是实际进行状态更改的地方，并且它会接受<code>State</code>作为第一个参数，提交载荷作为第二个参数。</p><p>在组件中提交<code>mutation</code>：<code>this.$store.commit(&#39;xxx&#39;)</code>或者使用<code>mapMutations</code>辅助函数将组件中的 <code>methods</code>映射为<code>store.commit</code>调用（需要在根节点注入<code>store</code>）。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mapMutations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuex&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  methods</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">    ...</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapMutations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;increment&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 将 \`this.increment()\` 映射为 \`this.$store.commit(&#39;increment&#39;)\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      // \`mapMutations\` 也支持载荷：</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;incrementBy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 将 \`this.incrementBy(amount)\` 映射为 \`this.$store.commit(&#39;incrementBy&#39;, amount)\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]),</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">    ...</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapMutations</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      add</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;increment&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 将 \`this.add()\` 映射为 \`this.$store.commit(&#39;increment&#39;)\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="actions-用于提交mutations" tabindex="-1"><a class="header-anchor" href="#actions-用于提交mutations"><span><code>Actions</code>：用于提交<code>Mutations</code></span></a></h2><p><code>Actions</code>和<code>Mutations</code>的功能大致相同，不同之处在于：</p><ol><li><code>Actions</code>提交的是<code>Mutations</code>，而不是直接变更状态。</li><li><code>Actions</code>可以包含任意异步操作。</li></ol><p>在组件中分发<code>Action</code>：<code>this.$store.dispatch(&#39;xxx&#39;)</code>分发<code>action</code>，或者使用<code>mapActions</code>辅助函数将组件的<code>methods</code>映射为<code>store.dispatch</code>调用（需要先在根节点注入<code>store</code>）：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mapActions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuex&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  methods</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">    ...</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapActions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;increment&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 将 \`this.increment()\` 映射为 \`this.$store.dispatch(&#39;increment&#39;)\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">      // \`mapActions\` 也支持载荷：</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;incrementBy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 将 \`this.incrementBy(amount)\` 映射为 \`this.$store.dispatch(&#39;incrementBy&#39;, amount)\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]),</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">    ...</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapActions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      add</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;increment&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 将 \`this.add()\` 映射为 \`this.$store.dispatch(&#39;increment&#39;)\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="modules-把以上四个属性再细分-让仓库更好管理" tabindex="-1"><a class="header-anchor" href="#modules-把以上四个属性再细分-让仓库更好管理"><span><code>Modules</code>：把以上四个属性再细分，让仓库更好管理</span></a></h2><p>模块化<code>vuex</code>，可以让每一个模块拥有自己的<code>State</code>、<code>Getters</code>、<code>Mutations</code>、<code>Actions</code>, 使得结构非常清晰，方便管理。</p><h2 id="修改数据的方法" tabindex="-1"><a class="header-anchor" href="#修改数据的方法"><span>修改数据的方法</span></a></h2><ul><li><code>dispatch</code>：用于触发<code>actions</code>，它接收一个<code>action</code>的<code>type</code>和<code>payload</code>作为参数。<br> 异步操作，写法：<code>this.$store.dispatch(&#39;action的type名&#39;,值)</code>。</li><li><code>commit</code>：用于触发<code>mutations</code>，它接收一个<code>mutation</code>的<code>type</code>和<code>payload</code>作为参数。<br> 同步操作，写法：<code>this.$store.commit(&#39;mutation的type名&#39;,值)</code>。</li></ul><h2 id="mutations和actions的区别" tabindex="-1"><a class="header-anchor" href="#mutations和actions的区别"><span><code>Mutations</code>和<code>Actions</code>的区别</span></a></h2><ul><li><code>Mutations</code>：都是同步事务。</li><li><code>Actions</code>：提交的是<code>Mutations</code>，而不是直接更改状态，可以包含异步操作。</li></ul><h2 id="vuex数据持久化" tabindex="-1"><a class="header-anchor" href="#vuex数据持久化"><span><code>vuex</code>数据持久化</span></a></h2><p><code>vuex</code>是<code>vue</code>的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态（<code>vuex</code>本身不是持久化存储）。</p><ol><li>使用<code>cookie</code>或<code>localStorage</code>做持久化存储。具体做法是在<code>vuex</code>中数据改变的时候把数据拷贝一份保存到<code>cookie</code>或<code>localStorage</code>里面，刷新之后，如果<code>cookie</code>或<code>localStorage</code>里有保存的数据，取出来作为<code>store</code>中<code>state</code>的初始数据。</li><li>使用<code>vue</code>插件<code>vuex-persist</code>或<code>vuex-persistedstate</code>或<code>vuex-plugin-persistedstate</code>实现数据、状态持久化。</li></ol>`,44),l=[n];function d(h,o){return e(),i("div",null,l)}const k=s(t,[["render",d],["__file","vuex.html.vue"]]),r=JSON.parse('{"path":"/VUE/vuex.html","title":"vuex","lang":"zh-CN","frontmatter":{"description":"vuex vuex简介 vuex是单向数据流还是双向数据流？ vuex是单向数据流，必须通过vuex提供的Mutations或者Actions修改，在组件中直接修改会报错。 vuex是一个专为vue.js应用程序开发的状态管理工具。它采用集中式存储，管理应用所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 vuex应用的核心就是sto...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/VUE/vuex.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"vuex"}],["meta",{"property":"og:description","content":"vuex vuex简介 vuex是单向数据流还是双向数据流？ vuex是单向数据流，必须通过vuex提供的Mutations或者Actions修改，在组件中直接修改会报错。 vuex是一个专为vue.js应用程序开发的状态管理工具。它采用集中式存储，管理应用所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 vuex应用的核心就是sto..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-25T18:37:39.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-25T18:37:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vuex\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-25T18:37:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"vuex简介","slug":"vuex简介","link":"#vuex简介","children":[]},{"level":2,"title":"vuex的核心概念或者属性","slug":"vuex的核心概念或者属性","link":"#vuex的核心概念或者属性","children":[]},{"level":2,"title":"State：类似于组件中的data","slug":"state-类似于组件中的data","link":"#state-类似于组件中的data","children":[]},{"level":2,"title":"Getters：类似于组件中的computed","slug":"getters-类似于组件中的computed","link":"#getters-类似于组件中的computed","children":[]},{"level":2,"title":"Mutations：类似于组件中的methods","slug":"mutations-类似于组件中的methods","link":"#mutations-类似于组件中的methods","children":[]},{"level":2,"title":"Actions：用于提交Mutations","slug":"actions-用于提交mutations","link":"#actions-用于提交mutations","children":[]},{"level":2,"title":"Modules：把以上四个属性再细分，让仓库更好管理","slug":"modules-把以上四个属性再细分-让仓库更好管理","link":"#modules-把以上四个属性再细分-让仓库更好管理","children":[]},{"level":2,"title":"修改数据的方法","slug":"修改数据的方法","link":"#修改数据的方法","children":[]},{"level":2,"title":"Mutations和Actions的区别","slug":"mutations和actions的区别","link":"#mutations和actions的区别","children":[]},{"level":2,"title":"vuex数据持久化","slug":"vuex数据持久化","link":"#vuex数据持久化","children":[]}],"git":{"createdTime":1723794615000,"updatedTime":1724611059000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":2}]},"readingTime":{"minutes":4.9,"words":1470},"filePathRelative":"VUE/vuex.md","localizedDate":"2024年8月16日","excerpt":"\\n<h2><code>vuex</code>简介</h2>\\n<p><code>vuex</code>是单向数据流还是双向数据流？</p>\\n<p><code>vuex</code>是单向数据流，必须通过<code>vuex</code>提供的<code>Mutations</code>或者<code>Actions</code>修改，在组件中直接修改会报错。</p>\\n<p><code>vuex</code>是一个专为<code>vue.js</code>应用程序开发的状态管理工具。它采用集中式存储，管理应用所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\\n<p><code>vuex</code>应用的核心就是<code>store</code>（仓库）。<code>store</code>基本上就是一个容器，它包含着应用中大部分的状态 (<code>State</code>)。</p>","autoDesc":true}');export{k as comp,r as data};
