import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,o as i,f as o}from"./app-C4tUi4gM.js";const s={},c=o(`<h1 id="vue中的虚拟dom" tabindex="-1"><a class="header-anchor" href="#vue中的虚拟dom"><span><code>vue</code>中的虚拟<code>DOM</code></span></a></h1><h2 id="虚拟dom是什么" tabindex="-1"><a class="header-anchor" href="#虚拟dom是什么"><span>虚拟<code>DOM</code>是什么</span></a></h2><p><code>vue</code>中的虚拟<code>DOM</code>是一种抽象层面的概念，它使得<code>vue</code>可以高效地更新<code>DOM</code>。虚拟<code>DOM</code>是由<code>vue</code>实例的<code>$el</code>属性表示的真实<code>DOM</code>元素。虚拟<code>DOM</code>的工作原理是：<code>vue</code>会在内存中维护一个表示<code>DOM</code>结构的树形数据，通常称之为<code>VNode</code>。当<code>vue</code>实例的数据发生变化时，<code>vue</code>会重新生成虚拟<code>DOM</code>，并比对新旧虚拟<code>DOM</code>之间的差异，最后只将变化的部分应用到真实的<code>DOM</code>上，而不是重新渲染整个视图。</p><p>虚拟<code>DOM</code>的本质是用来描述<code>DOM</code>的<code>js</code>对象，虚拟<code>DOM</code>的三要素：<code>target（不可缺少）</code>、<code>attr</code>、<code>children</code>。<code>vue</code>中通过虚拟<code>DOM</code>，使用<code>document.createElement</code>创建真实的<code>DOM</code>。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  target</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ul&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 不可缺少</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  attr</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;abc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  children</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      target</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;li&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="虚拟dom的优点" tabindex="-1"><a class="header-anchor" href="#虚拟dom的优点"><span>虚拟<code>DOM</code>的优点</span></a></h2><ol><li>性能优化：虚拟<code>DOM</code>通过减少不必要的<code>DOM</code>操作，提高渲染性能。它使用一个高效的<code>diff</code>算法来计算出真正需要更新的节点，最大限度地减少<code>DOM</code>操作，从而提高性能。</li><li>抽象化<code>DOM</code>操作：由于虚拟<code>DOM</code>以<code>js</code>对象为基础，不依赖真实平台环境，因此可以跨平台操作，例如在浏览器平台、<code>Weex</code>、<code>Node</code>等环境中使用。</li><li>无需手动操作<code>DOM</code>：<code>vue</code>的虚拟<code>DOM</code>可以自动处理视图更新，开发者只需要关注数据变化，无需手动操作<code>DOM</code>，大大提高了开发效率。</li></ol><h2 id="虚拟dom的缺点" tabindex="-1"><a class="header-anchor" href="#虚拟dom的缺点"><span>虚拟<code>DOM</code>的缺点</span></a></h2><ol><li>首次渲染大量<code>DOM</code>时性能较差：由于虚拟<code>DOM</code>需要进行计算和比较，所以在首次渲染大量<code>DOM</code>时，可能会比直接操作<code>DOM</code>慢。</li><li>不适合小型项目：对于小型项目或简单页面，使用虚拟<code>DOM</code>可能会增加额外的计算开销，此时直接操作<code>DOM</code>可能更为简单高效。</li></ol><h2 id="虚拟dom如何提升vue的渲染效率" tabindex="-1"><a class="header-anchor" href="#虚拟dom如何提升vue的渲染效率"><span>虚拟<code>DOM</code>如何提升<code>vue</code>的渲染效率</span></a></h2><ul><li>初次渲染时，渲染完成后会保存对应的虚拟<code>DOM</code>（js 对象）。</li><li>更新节点时，会重新生成一份虚拟<code>DOM</code>，与之前保存的虚拟<code>DOM</code>做比较（<code>diff</code>算法），然后对变化的部分做局部更新。</li><li>将直接操作<code>DOM</code>（影响浏览器性能），转变成<code>js</code>对象的比较（执行效率上的问题）。</li></ul>`,11),a=[c];function t(n,l){return i(),d("div",null,a)}const p=e(s,[["render",t],["__file","vue中的虚拟DOM.html.vue"]]),k=JSON.parse('{"path":"/VUE/vue%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9FDOM.html","title":"vue中的虚拟DOM","lang":"zh-CN","frontmatter":{"description":"vue中的虚拟DOM 虚拟DOM是什么 vue中的虚拟DOM是一种抽象层面的概念，它使得vue可以高效地更新DOM。虚拟DOM是由vue实例的$el属性表示的真实DOM元素。虚拟DOM的工作原理是：vue会在内存中维护一个表示DOM结构的树形数据，通常称之为VNode。当vue实例的数据发生变化时，vue会重新生成虚拟DOM，并比对新旧虚拟DOM之间的...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/VUE/vue%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9FDOM.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"vue中的虚拟DOM"}],["meta",{"property":"og:description","content":"vue中的虚拟DOM 虚拟DOM是什么 vue中的虚拟DOM是一种抽象层面的概念，它使得vue可以高效地更新DOM。虚拟DOM是由vue实例的$el属性表示的真实DOM元素。虚拟DOM的工作原理是：vue会在内存中维护一个表示DOM结构的树形数据，通常称之为VNode。当vue实例的数据发生变化时，vue会重新生成虚拟DOM，并比对新旧虚拟DOM之间的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue中的虚拟DOM\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"虚拟DOM是什么","slug":"虚拟dom是什么","link":"#虚拟dom是什么","children":[]},{"level":2,"title":"虚拟DOM的优点","slug":"虚拟dom的优点","link":"#虚拟dom的优点","children":[]},{"level":2,"title":"虚拟DOM的缺点","slug":"虚拟dom的缺点","link":"#虚拟dom的缺点","children":[]},{"level":2,"title":"虚拟DOM如何提升vue的渲染效率","slug":"虚拟dom如何提升vue的渲染效率","link":"#虚拟dom如何提升vue的渲染效率","children":[]}],"git":{"createdTime":1723794615000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":2.02,"words":606},"filePathRelative":"VUE/vue中的虚拟DOM.md","localizedDate":"2024年8月16日","excerpt":"\\n<h2>虚拟<code>DOM</code>是什么</h2>\\n<p><code>vue</code>中的虚拟<code>DOM</code>是一种抽象层面的概念，它使得<code>vue</code>可以高效地更新<code>DOM</code>。虚拟<code>DOM</code>是由<code>vue</code>实例的<code>$el</code>属性表示的真实<code>DOM</code>元素。虚拟<code>DOM</code>的工作原理是：<code>vue</code>会在内存中维护一个表示<code>DOM</code>结构的树形数据，通常称之为<code>VNode</code>。当<code>vue</code>实例的数据发生变化时，<code>vue</code>会重新生成虚拟<code>DOM</code>，并比对新旧虚拟<code>DOM</code>之间的差异，最后只将变化的部分应用到真实的<code>DOM</code>上，而不是重新渲染整个视图。</p>","autoDesc":true}');export{p as comp,k as data};
