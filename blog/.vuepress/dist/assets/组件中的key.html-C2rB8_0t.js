import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as c,f as t}from"./app-C4tUi4gM.js";const d={},a=t('<h1 id="组件中的key" tabindex="-1"><a class="header-anchor" href="#组件中的key"><span>组件中的<code>key</code></span></a></h1><p>每个组件都有一个虚拟<code>DOM</code>元素，当组件被更新或删除时，<code>react</code>需要确定如何匹配新旧元素，以确保正确更新和渲染（<code>domDiff算法</code>）。这一过程需要使用<code>key</code>属性来帮助<code>react</code>进行唯一性标识。</p><p>优点：</p><ol><li>性能优化：<code>key</code>属性帮助<code>react</code>识别唯一的组件，从而可以更高效地更新和重渲染。</li><li>列表操作：<code>key</code>属性使<code>react</code>能够准确处理列表的增加、更新和删除操作。</li><li>组件重用：<code>key</code>属性有助于确保组件的唯一性，使组件能够被正确复用。</li></ol><p>局限性：</p><ol><li>全局唯一性：<code>key</code>属性必须在整个组件树中具有唯一性，需要小心处理。</li><li>不可变性：如果<code>key</code>属性发生变化，可能会导致<code>react</code>不正确地处理组件。</li><li>不宜滥用：不应滥用<code>key</code>属性，应该只在需要时使用，以避免复杂性。</li></ol><h2 id="key如果不写-源码会自己加上去吗" tabindex="-1"><a class="header-anchor" href="#key如果不写-源码会自己加上去吗"><span><code>key</code>如果不写，源码会自己加上去吗</span></a></h2><p>不会，如果不写，就是<code>undefined</code>, 在<code>domDiff</code>的时候就会使用索引来对比。</p>',8),r=[a];function i(n,l){return c(),o("div",null,r)}const s=e(d,[["render",i],["__file","组件中的key.html.vue"]]),k=JSON.parse('{"path":"/REACT/%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84key.html","title":"组件中的key","lang":"zh-CN","frontmatter":{"description":"组件中的key 每个组件都有一个虚拟DOM元素，当组件被更新或删除时，react需要确定如何匹配新旧元素，以确保正确更新和渲染（domDiff算法）。这一过程需要使用key属性来帮助react进行唯一性标识。 优点： 性能优化：key属性帮助react识别唯一的组件，从而可以更高效地更新和重渲染。 列表操作：key属性使react能够准确处理列表的增加...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/REACT/%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84key.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"组件中的key"}],["meta",{"property":"og:description","content":"组件中的key 每个组件都有一个虚拟DOM元素，当组件被更新或删除时，react需要确定如何匹配新旧元素，以确保正确更新和渲染（domDiff算法）。这一过程需要使用key属性来帮助react进行唯一性标识。 优点： 性能优化：key属性帮助react识别唯一的组件，从而可以更高效地更新和重渲染。 列表操作：key属性使react能够准确处理列表的增加..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"🍑"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件中的key\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"key如果不写，源码会自己加上去吗","slug":"key如果不写-源码会自己加上去吗","link":"#key如果不写-源码会自己加上去吗","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.97,"words":291},"filePathRelative":"REACT/组件中的key.md","excerpt":"\\n<p>每个组件都有一个虚拟<code>DOM</code>元素，当组件被更新或删除时，<code>react</code>需要确定如何匹配新旧元素，以确保正确更新和渲染（<code>domDiff算法</code>）。这一过程需要使用<code>key</code>属性来帮助<code>react</code>进行唯一性标识。</p>\\n<p>优点：</p>\\n<ol>\\n<li>性能优化：<code>key</code>属性帮助<code>react</code>识别唯一的组件，从而可以更高效地更新和重渲染。</li>\\n<li>列表操作：<code>key</code>属性使<code>react</code>能够准确处理列表的增加、更新和删除操作。</li>\\n<li>组件重用：<code>key</code>属性有助于确保组件的唯一性，使组件能够被正确复用。</li>\\n</ol>","autoDesc":true}');export{s as comp,k as data};
