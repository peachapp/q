import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as t,f as c}from"./app-C4tUi4gM.js";const i={},l=c('<h1 id="css优化、提高性能的方法" tabindex="-1"><a class="header-anchor" href="#css优化、提高性能的方法"><span><code>CSS</code>优化、提高性能的方法</span></a></h1><p>加载性能：</p><ol><li><code>css</code>压缩：将写好的<code>css</code>进行打包压缩，可以减少很多的体积。</li><li><code>css</code>单一样式：当需要下边距和左边距的时候，很多时候选择：<code>margin:0 0 bottom left;</code>，但<code>margin-bottom: bottom; margin-left: left;</code>执行的效率更高。</li><li>减少使用<code>@import</code>, 建议使用<code>link</code>，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</li></ol><p>选择器性能：</p><ol><li>关键选择器（<code>key selector</code>）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。<code>CSS</code>选择器是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等；</li><li>如果规则拥有<code>ID</code>选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们）。</li><li>避免使用通配规则，如<code>*{}</code>计算次数惊人！只对需要用到的元素进行选择。</li><li>尽量少的去对标签进行选择，而是用<code>class</code>。</li><li>尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。</li><li>了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</li></ol><p>渲染性能：</p><ol><li>慎重使用高性能属性：浮动、定位。</li><li>尽量减少页面重排、重绘。</li><li>去除空规则：<code>{}</code>。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少<code>css</code>文档体积。</li><li>属性值为<code>0</code>时，不加单位。</li><li>属性值为浮动小数<code>0.\\*\\*</code>，可以省略小数点之前的<code>0</code>。</li><li>标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。</li><li>不使用<code>@import</code>前缀，它会影响<code>css</code>的加载速度。</li><li>选择器优化嵌套，尽量避免层级过深。</li><li><code>css</code>雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，先考虑清楚优劣，再使用。</li><li>正确使用<code>display</code>属性，由于<code>display</code>的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。</li><li>不滥用<code>web</code>字体。对于中文网站来说<code>WebFonts</code>可能很陌生，国外却很流行。<code>WebFonts</code>通常体积庞大，而且一些浏览器在下载<code>WebFonts</code>时会阻塞页面渲染损伤性能。</li></ol><p>可维护性、健壮性：</p><ol><li>将具有相同属性的样式抽离出来，整合并通过<code>class</code>在页面中进行使用，提高<code>css</code>的可维护性。</li><li>样式与内容分离：将<code>css</code>代码定义到外部<code>css</code>中。</li></ol><p><a href="https://www.zhihu.com/question/19886806" target="_blank" rel="noopener noreferrer">《CSS 优化、提高性能的方法有哪些？》</a></p><p><a href="https://www.jianshu.com/p/4e673bf24a3b" target="_blank" rel="noopener noreferrer">《CSS 优化，提高性能的方法》</a></p>',11),d=[l];function r(s,a){return t(),o("div",null,d)}const p=e(i,[["render",r],["__file","CSS优化、提高性能的方法.html.vue"]]),h=JSON.parse('{"path":"/CSS/CSS%E4%BC%98%E5%8C%96%E3%80%81%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95.html","title":"CSS优化、提高性能的方法","lang":"zh-CN","frontmatter":{"description":"CSS优化、提高性能的方法 加载性能： css压缩：将写好的css进行打包压缩，可以减少很多的体积。 css单一样式：当需要下边距和左边距的时候，很多时候选择：margin:0 0 bottom left;，但margin-bottom: bottom; margin-left: left;执行的效率更高。 减少使用@import, 建议使用link，...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/CSS/CSS%E4%BC%98%E5%8C%96%E3%80%81%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"CSS优化、提高性能的方法"}],["meta",{"property":"og:description","content":"CSS优化、提高性能的方法 加载性能： css压缩：将写好的css进行打包压缩，可以减少很多的体积。 css单一样式：当需要下边距和左边距的时候，很多时候选择：margin:0 0 bottom left;，但margin-bottom: bottom; margin-left: left;执行的效率更高。 减少使用@import, 建议使用link，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS优化、提高性能的方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723630143000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":2.72,"words":817},"filePathRelative":"CSS/CSS优化、提高性能的方法.md","localizedDate":"2024年8月14日","excerpt":"\\n<p>加载性能：</p>\\n<ol>\\n<li><code>css</code>压缩：将写好的<code>css</code>进行打包压缩，可以减少很多的体积。</li>\\n<li><code>css</code>单一样式：当需要下边距和左边距的时候，很多时候选择：<code>margin:0 0 bottom left;</code>，但<code>margin-bottom: bottom; margin-left: left;</code>执行的效率更高。</li>\\n<li>减少使用<code>@import</code>, 建议使用<code>link</code>，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</li>\\n</ol>","autoDesc":true}');export{p as comp,h as data};
