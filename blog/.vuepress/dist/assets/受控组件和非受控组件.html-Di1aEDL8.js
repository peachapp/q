import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o,f as c}from"./app-C4tUi4gM.js";const a={},n=c('<h1 id="受控组件和非受控组件" tabindex="-1"><a class="header-anchor" href="#受控组件和非受控组件"><span>受控组件和非受控组件</span></a></h1><p><code>react</code>中的组件根据是否受<code>react</code>控制可分为受控组件的和非受控组件。</p><h2 id="受控组件" tabindex="-1"><a class="header-anchor" href="#受控组件"><span>受控组件</span></a></h2><ol><li>表单元素依赖于状态，表单元素需要默认值实时映射到状态的时候，就是受控组件，这个和双向绑定相似。</li><li>受控组件，表单元素的修改会实时映射到状态值上，此时就可以对输入的内容进行校验。</li><li>受控组件只有继承<code>React.Component</code>才会有状态。</li><li>受控组件必须要在表单上使用<code>onChange</code>事件来绑定对应的事件，输入的值始终由<code>react</code>的<code>state</code>驱动。</li></ol><p>受控组件更新<code>state</code>的流程：</p><ol><li>可以通过初始<code>state</code>中设置表单的默认值。</li><li>每当表单的值发生变化时，调用<code>onChange</code>事件处理器。</li><li>事件处理器通过事件对象<code>event</code>拿到改变后的值，并更新组件的<code>state</code>。</li><li>通过<code>setState</code>方法更新<code>state</code>，就会触发视图的重新渲染，完成表单组件的更新。</li></ol><h2 id="非受控组件" tabindex="-1"><a class="header-anchor" href="#非受控组件"><span>非受控组件</span></a></h2><p>在底层实现时是在其内部维护了自己的状态<code>state</code>，这样表现出用户输入任何值都能反应到元素上。</p>',8),l=[n];function i(r,d){return o(),t("div",null,l)}const h=e(a,[["render",i],["__file","受控组件和非受控组件.html.vue"]]),m=JSON.parse('{"path":"/REACT/%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E5%92%8C%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6.html","title":"受控组件和非受控组件","lang":"zh-CN","frontmatter":{"description":"受控组件和非受控组件 react中的组件根据是否受react控制可分为受控组件的和非受控组件。 受控组件 表单元素依赖于状态，表单元素需要默认值实时映射到状态的时候，就是受控组件，这个和双向绑定相似。 受控组件，表单元素的修改会实时映射到状态值上，此时就可以对输入的内容进行校验。 受控组件只有继承React.Component才会有状态。 受控组件必须...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/REACT/%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E5%92%8C%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"受控组件和非受控组件"}],["meta",{"property":"og:description","content":"受控组件和非受控组件 react中的组件根据是否受react控制可分为受控组件的和非受控组件。 受控组件 表单元素依赖于状态，表单元素需要默认值实时映射到状态的时候，就是受控组件，这个和双向绑定相似。 受控组件，表单元素的修改会实时映射到状态值上，此时就可以对输入的内容进行校验。 受控组件只有继承React.Component才会有状态。 受控组件必须..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"🍑"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"受控组件和非受控组件\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"受控组件","slug":"受控组件","link":"#受控组件","children":[]},{"level":2,"title":"非受控组件","slug":"非受控组件","link":"#非受控组件","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.07,"words":322},"filePathRelative":"REACT/受控组件和非受控组件.md","excerpt":"\\n<p><code>react</code>中的组件根据是否受<code>react</code>控制可分为受控组件的和非受控组件。</p>\\n<h2>受控组件</h2>\\n<ol>\\n<li>表单元素依赖于状态，表单元素需要默认值实时映射到状态的时候，就是受控组件，这个和双向绑定相似。</li>\\n<li>受控组件，表单元素的修改会实时映射到状态值上，此时就可以对输入的内容进行校验。</li>\\n<li>受控组件只有继承<code>React.Component</code>才会有状态。</li>\\n<li>受控组件必须要在表单上使用<code>onChange</code>事件来绑定对应的事件，输入的值始终由<code>react</code>的<code>state</code>驱动。</li>\\n</ol>","autoDesc":true}');export{h as comp,m as data};
