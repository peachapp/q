import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as c,f as d}from"./app-C4tUi4gM.js";const m="/assets/0002-BTU8DPvC.jpeg",t="/assets/0003-CZprcPhX.jpeg",i="/assets/0004-C1-_ZHwL.jpeg",v={},l=d('<h1 id="mvvm和mvc" tabindex="-1"><a class="header-anchor" href="#mvvm和mvc"><span><code>mvvm</code>和<code>mvc</code></span></a></h1><figure><img src="'+m+'" alt="mvvm和mvc" tabindex="0" loading="lazy"><figcaption>mvvm和mvc</figcaption></figure><p><code>mvvm</code>：<code>modle</code>可以触发视图更新，<code>view</code>可以更改数据，形成数据双向的绑定。<code>model</code>和<code>view</code>不直接进行交互，它们通过<code>viewmodel</code>进行交互。</p><ul><li><code>model</code>：模型层（数据层：<code>vue</code>中的<code>data</code>数据）。</li><li><code>view</code>：视图层（dom ==&gt; 在页面中展示的内容）。</li><li><code>viewmodel</code>：视图模型层（就是<code>vue</code>源码）。</li></ul><figure><img src="'+t+'" alt="mvvm" tabindex="0" loading="lazy"><figcaption>mvvm</figcaption></figure><p><code>mvc</code>：<code>model</code>通知<code>view</code>进行页面更新，<code>view</code>接受用户行为通知<code>controller</code>，<code>controller</code>通知<code>model</code>进行数据更新，实现<code>model</code>和<code>view</code>的交互。</p><ul><li><code>model</code>：模型层。</li><li><code>view</code>：视图层。</li><li><code>controller</code>：控制器。</li></ul><figure><img src="'+i+'" alt="mvc" tabindex="0" loading="lazy"><figcaption>mvc</figcaption></figure><ol><li><code>web1.0</code>时代：<br> 文件全在一起，也就是前端和后端的代码全在一起。<br> 问题： <ul><li>前端和后端都是一个人开发。（技术没有侧重点或者责任不够细分）</li><li>项目不好维护。</li><li><code>html</code>、<code>css</code>、<code>js</code>没有页面的静态内容，后端没办法工作。（没办法套数据）</li></ul></li><li><code>web2.0</code>时代：<br><code>ajax</code>出现了，就可以：前端和后端数据分离了。<br> 解决问题：后端不用等前端页面弄完，后端做后端的事情（写接口），前端做前端的事情（布局、特效、发送请求）。<br> 问题： <ul><li><code>html</code>、<code>css</code>、<code>js</code>都在一个页面中，单个页面可能内容也是比较多的（也会出现不好维护的情况）。</li></ul></li><li>出现前端的<code>mvc</code>、<code>mvvm</code>：<br> 解决问题：可以把一个特别大页面，进行拆分（组件化），单个组件进行维护。<br> 什么是<code>mvvm</code>：<code>mvvm</code>是“<code>model、view、viewmodel</code>”的缩写。</li></ol>',9),a=[l];function r(n,p){return c(),o("div",null,a)}const u=e(v,[["render",r],["__file","mvvm和mvc.html.vue"]]),h=JSON.parse('{"path":"/VUE/mvvm%E5%92%8Cmvc.html","title":"mvvm和mvc","lang":"zh-CN","frontmatter":{"description":"mvvm和mvc mvvm和mvcmvvm和mvc mvvm：modle可以触发视图更新，view可以更改数据，形成数据双向的绑定。model和view不直接进行交互，它们通过viewmodel进行交互。 model：模型层（数据层：vue中的data数据）。 view：视图层（dom ==> 在页面中展示的内容）。 viewmodel：视图模型层（就...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/VUE/mvvm%E5%92%8Cmvc.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"mvvm和mvc"}],["meta",{"property":"og:description","content":"mvvm和mvc mvvm和mvcmvvm和mvc mvvm：modle可以触发视图更新，view可以更改数据，形成数据双向的绑定。model和view不直接进行交互，它们通过viewmodel进行交互。 model：模型层（数据层：vue中的data数据）。 view：视图层（dom ==> 在页面中展示的内容）。 viewmodel：视图模型层（就..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-26T06:13:09.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-26T06:13:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mvvm和mvc\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-26T06:13:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723794615000,"updatedTime":1724652789000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":3}]},"readingTime":{"minutes":1.26,"words":379},"filePathRelative":"VUE/mvvm和mvc.md","localizedDate":"2024年8月16日","excerpt":"\\n<figure><figcaption>mvvm和mvc</figcaption></figure>\\n<p><code>mvvm</code>：<code>modle</code>可以触发视图更新，<code>view</code>可以更改数据，形成数据双向的绑定。<code>model</code>和<code>view</code>不直接进行交互，它们通过<code>viewmodel</code>进行交互。</p>\\n<ul>\\n<li><code>model</code>：模型层（数据层：<code>vue</code>中的<code>data</code>数据）。</li>\\n<li><code>view</code>：视图层（dom ==&gt; 在页面中展示的内容）。</li>\\n<li><code>viewmodel</code>：视图模型层（就是<code>vue</code>源码）。</li>\\n</ul>","autoDesc":true}');export{u as comp,h as data};
