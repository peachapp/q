import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as t,f as r}from"./app-8HN3oAmX.js";const c={},d=r('<h1 id="generator函数" tabindex="-1"><a class="header-anchor" href="#generator函数"><span><code>Generator</code>函数</span></a></h1><p><code>Generator</code>顾名思义是生成器，使用<code>function*</code>语法和一个或多个<code>yield</code>表达式创建一个函数即为生成器，它的返回值就是一个迭代器（即遍历器）。</p><p>它不同于普通函数，它是可以暂停执行的，所以函数名之前要加星号，以示区别。其实整个<code>Generator</code>函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用<code>yield</code>语句注明。</p><p>调用<code>Generator</code>函数，会返回一个内部指针<code>g</code>（即遍历器 ）。这是<code>Generator</code>函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是指针对象。</p><p><code>g.next</code>方法的作用是分阶段执行<code>Generator</code>函数。每次调用<code>next</code>方法，会返回一个对象，这个对象就是具有两个属性（<code>done (done=false)</code> 和 <code>value (value=operand)</code>）的<code>IteratorResult</code>对象。<code>value</code>属性是<code>yield</code>语句后面表达式的值，表示当前阶段的值，<code>done</code>属性是一个布尔值，表示<code>Generator</code>函数是否执行完毕，即是否还有下一个阶段。</p><p><code>Generator</code>函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。</p>',6),a=[d];function n(p,i){return t(),o("div",null,a)}const s=e(c,[["render",n],["__file","generator.html.vue"]]),h=JSON.parse('{"path":"/JAVASCRIPT/generator.html","title":"Generator函数","lang":"zh-CN","frontmatter":{"description":"Generator函数 Generator顾名思义是生成器，使用function*语法和一个或多个yield表达式创建一个函数即为生成器，它的返回值就是一个迭代器（即遍历器）。 它不同于普通函数，它是可以暂停执行的，所以函数名之前要加星号，以示区别。其实整个Generator函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/JAVASCRIPT/generator.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"Generator函数"}],["meta",{"property":"og:description","content":"Generator函数 Generator顾名思义是生成器，使用function*语法和一个或多个yield表达式创建一个函数即为生成器，它的返回值就是一个迭代器（即遍历器）。 它不同于普通函数，它是可以暂停执行的，所以函数名之前要加星号，以示区别。其实整个Generator函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Generator函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723009479000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":1.07,"words":321},"filePathRelative":"JAVASCRIPT/generator.md","localizedDate":"2024年8月7日","excerpt":"\\n<p><code>Generator</code>顾名思义是生成器，使用<code>function*</code>语法和一个或多个<code>yield</code>表达式创建一个函数即为生成器，它的返回值就是一个迭代器（即遍历器）。</p>\\n<p>它不同于普通函数，它是可以暂停执行的，所以函数名之前要加星号，以示区别。其实整个<code>Generator</code>函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用<code>yield</code>语句注明。</p>\\n<p>调用<code>Generator</code>函数，会返回一个内部指针<code>g</code>（即遍历器 ）。这是<code>Generator</code>函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是指针对象。</p>","autoDesc":true}');export{s as comp,h as data};
