import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o,f as c}from"./app-C4tUi4gM.js";const a={},n=c('<h1 id="柯里化" tabindex="-1"><a class="header-anchor" href="#柯里化"><span>柯里化</span></a></h1><p>定义：</p><p>柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。（维基百科）</p><p>柯里化可以将一个函数从可调用的<code>f(a, b, c)</code>转换为<code>f(a)(b)(c)</code>。</p><p>优点：</p><ol><li>让函数的职责单一。</li><li>复用参数逻辑。</li></ol><p>性能问题：</p><ol><li>存取<code>arguments</code>对象通常要比存取命名参数要慢一点。</li><li>一些老版本的浏览器在<code>arguments.length</code>的实现上是相当慢的。</li><li>使用<code>fn.call( … )</code>和<code>fn.apply( … )</code>通常比直接调用<code>fn( … )</code>稍微慢点。</li><li>创建大量嵌套作用域和闭包函数会带来花销，无论是在内存还是速度上。</li></ol>',8),i=[n];function l(p,r){return o(),t("div",null,i)}const s=e(a,[["render",l],["__file","柯里化.html.vue"]]),h=JSON.parse('{"path":"/JAVASCRIPT/%E6%9F%AF%E9%87%8C%E5%8C%96.html","title":"柯里化","lang":"zh-CN","frontmatter":{"description":"柯里化 定义： 柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。（维基百科） 柯里化可以将一个函数从可调用的f(a, b, c)转换为f(a)(b)(c)。 优点： 让函数的职责单一。 复用参数逻辑。 性能问题： 存取arguments对象通常要比存取命名参数要慢一点。...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/JAVASCRIPT/%E6%9F%AF%E9%87%8C%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"🍑的博客 ！"}],["meta",{"property":"og:title","content":"柯里化"}],["meta",{"property":"og:description","content":"柯里化 定义： 柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。（维基百科） 柯里化可以将一个函数从可调用的f(a, b, c)转换为f(a)(b)(c)。 优点： 让函数的职责单一。 复用参数逻辑。 性能问题： 存取arguments对象通常要比存取命名参数要慢一点。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-20T06:06:03.000Z"}],["meta",{"property":"article:author","content":"🍑"}],["meta",{"property":"article:modified_time","content":"2024-08-20T06:06:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"柯里化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-20T06:06:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"🍑\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1723009479000,"updatedTime":1724133963000,"contributors":[{"name":"songzhichao","email":"caoxu@boyetrade.com","commits":1}]},"readingTime":{"minutes":0.7,"words":209},"filePathRelative":"JAVASCRIPT/柯里化.md","localizedDate":"2024年8月7日","excerpt":"\\n<p>定义：</p>\\n<p>柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。（维基百科）</p>\\n<p>柯里化可以将一个函数从可调用的<code>f(a, b, c)</code>转换为<code>f(a)(b)(c)</code>。</p>\\n<p>优点：</p>\\n<ol>\\n<li>让函数的职责单一。</li>\\n<li>复用参数逻辑。</li>\\n</ol>\\n<p>性能问题：</p>\\n<ol>\\n<li>存取<code>arguments</code>对象通常要比存取命名参数要慢一点。</li>\\n<li>一些老版本的浏览器在<code>arguments.length</code>的实现上是相当慢的。</li>\\n<li>使用<code>fn.call( … )</code>和<code>fn.apply( … )</code>通常比直接调用<code>fn( … )</code>稍微慢点。</li>\\n<li>创建大量嵌套作用域和闭包函数会带来花销，无论是在内存还是速度上。</li>\\n</ol>","autoDesc":true}');export{s as comp,h as data};
